/*
    wscript.js - simulates WScript (Windows scripting host) environment
*/

// Imports

// https://nodejs.org/api/buffer.html#bufferresolveobjecturlid
const { resolveObjectURL } = require('node:buffer');

// https://nodejs.org/api/path.html#pathwin32
const { win32 } = require('path');

// https://cryptojs.gitbook.io/docs/
const CryptoJS = require("crypto-js");

util_log("Preparing sandbox to emulate WScript environment.");

// Globals used for MalwareJail
_wscript_saved_files = {};
_wscript_urls = [];
_wscript_wmis = [];
_wscript_objects = [];

// Useful constants

// This regular expression is used for finding base64-encoded blobs
const encoded_base64_regex = new RegExp("data:(?:[^;]+;)+base64,(.*)");

// Useful objects

// This object is used for representing a file system for VBA objects such
// as TextStream, FolderObject and FileSystemObject
const FS = {
    "C:": {
        "PROGRAMDATA": {},
        "PROGRAM FILES": { "COMMON FILES": {} },
        "PROGRAM FILES (X86)": { "COMMON FILES": {} },
        "USERS": {
            "USER": {
                "APPDATA": {
                    "LOCAL": { "TEMP": {} },
                    "ROAMING": {},
                    "LOCALLOW": {}
                },
                "DESKTOP": {}
            },
            "DEFAULT": {
                "APPDATA": {
                    "LOCAL": { "TEMP": {} },
                    "ROAMING": {},
                    "LOCALLOW": {}
                },
                "DESKTOP": {}
            },
            "PUBLIC": {
                "APPDATA": {
                    "LOCAL": { "TEMP": {} },
                    "ROAMING": {},
                    "LOCALLOW": {}
                },
                "DESKTOP": {}
            }
        },
        "WINDOWS": {
            "SYSTEM32": {
                "DRIVERS": {
                    "ETC": { "SERVICES": "FILE CONTENT" }
                }
            }
        }
    },
};

// https://learn.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)
// This object is used for representing the environment variables of a
// Windows operating system and is accessed by multiple VBA objects.
// This object is also used for defining WshEnvironment properties.
var ENV = {
    "ALLUSERSPROFILE": "C:\\ProgramData",
    "APPDATA": "C:\\Users\\User\\AppData\\Roaming",
    "COMMONPROGRAMFILES": "C:\\Program Files\\Common Files",
    "COMMONPROGRAMFILES(X86)": "C:\\Program Files (x86)\\Common Files",
    "COMMONPROGRAMW6432": "C:\\Program Files\\Common Files",
    "COMPUTERNAME": "COMPUTER",
    "COMPLUS_VERSION": "v4.0.30319",
    "COMSPEC": "C:\\WINDOWS\\system32\\cmd.exe",
    "CWD": "C:\\Users\\User",
    "FPS_BROWSER_APP_PROFILE_STRING": "Internet Explorer",
    "FPS_BROWSER_USER_PROFILE_STRING": "Default",
    "FP_NO_HOST_CHECK": "NO",
    "HOMEDRIVE": "C:",
    "HOMEPATH": "\\Users\\User",
    "LANG": "EN",
    "LOCALAPPDATA": "C:\\Users\\User\\AppData\\Local",
    "LOGONSERVER": "\\\\COMPUTER",
    "NUMBER_OF_PROCESSORS": "4",
    "OS": "Windows_NT",
    "PATH": "C:\\Users\\User\\AppData\\Roaming\\npm;C:\\Program Files\\nodejs\\;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Lenovo\\Fingerprint Manager Pro\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft Emulator Manager\\1.0\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Strawberry\\c\\bin;C:\\Strawberry\\perl\\site\\bin;C:\\Strawberry\\perl\\bin;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\dotnet\\;C:\\Tcl\\bin;C:\\Program Files (x86)\\Nmap;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\User\\AppData\\Roaming\\npm;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Lenovo\\Fingerprint Manager Pro\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft Emulator Manager\\1.0\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Strawberry\\c\\bin;C:\\Strawberry\\perl\\site\\bin;C:\\Strawberry\\perl\\bin;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\dotnet\\;C:\\Users\\User\\AppData\\Local\\Microsoft\\WindowsApps;",
    "PATHEXT": ".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC",
    "PROCESSOR_ARCHITECTURE": "AMD64",
    "PROCESSOR_IDENTIFIER": "Intel64 Family 6 Model 61 Stepping 4, GenuineIntel",
    "PROCESSOR_LEVEL": "6",
    "PROCESSOR_REVISION": "3d04",
    "PROGRAMDATA": "C:\\ProgramData",
    "PROGRAMFILES": "C:\\Program Files",
    "PROGRAMFILES(X86)": "C:\\Program Files (x86)",
    "PROGRAMW6432": "C:\\Program Files",
    "PROMPT": "$P$G",
    "PSMODULEPATH": "C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\PowerShell\\Modules\\;C:\\Program Files\\WindowsPowerShell\\Modules\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\ResourceManager\\AzureResourceManager\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\ServiceManagement\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\Storage\\",
    "PUBLIC": "C:\\Users\\Public",
    "SESSIONNAME": "Console",
    "SYSTEMDRIVE": "C:",
    "SYSTEMROOT": "C:\\WINDOWS",
    "TEMP": "C:\\Users\\User\\AppData\\Local\\Temp",
    "TMP": "C:\\Users\\User\\AppData\\Local\\Temp",
    "USERDOMAIN": "COMPUTER",
    "USERDOMAIN_ROAMINGPROFILE": "COMPUTER",
    "USERNAME": "User",
    "USERPROFILE": "C:\\Users\\User",
    "WINDIR": "C:\\WINDOWS",
    "SYSTEMDIRECTORY": "C:\\WINDOWS\\System32",
    "SYSTEMDRIVE": "C:\\",
    "SYSTEMROOT": "C:\\WinNT",
};

// Registry Key helper objects and methods

// This object is used as a map to mock standard (and some not so standard) registry keys
// The following root key paths are mapped to acronyms for normalized access
// HKEY_CURRENT_USER or HKCU
// HKEY_USERS
// HKEY_LOCAL_MACHINE or HKLM
// HKEY_CLASSES_ROOT  or HKCR
// HKEY_CURRENT_CONFIG
var REG = {
    "HKLM\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\PRODUCTID": "00330-80000-00000-AA676",
    "HKLM\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\SYSTEMROOT": "c:\\WINDOWS",
    /* Windows 10 64bit */
    "HKLM\\SOFTWARE\\CLASSES\\MIME\\DATABASE\\RFC1766\\1034": "en-us;@%SystemRoot%\system32\mlang.dll,-4386",
    "HKLM\\SOFTWARE\\CLASSES\\MIME\\DATABASE\\RFC1766\\0409": "en-us;@%SystemRoot%\system32\mlang.dll,-4386",
    //"HKEY_CLASSES_ROOT\\HTTP\\SHELL\\OPEN\\COMMAND" : "\"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe\" -osint -url \"%1\"",
    "HKCR\\HTTP\\SHELL\\OPEN\\COMMAND": "\"C:\\Chrome\\chrome.exe\" -url \"%1\"",
    "eee": "",
    "HKLM\\SOFTWARE\\SCRIPTNAME": "ScriptName.js",
    "HKCU\\SOFTWARE\\XEONITOX\\MP3CONV\\CFG": "",
}

// https://learn.microsoft.com/en-us/previous-versions/windows/desktop/regprov/setdwordvalue-method-in-class-stdregprov
REGDEFKEY_MAP = {
    2147483648: "HKEY_CLASSES_ROOT",
    2147483649: "HKEY_CURRENT_USER",
    2147483650: "HKEY_LOCAL_MACHINE",
    2147483651: "HKEY_USERS",
    2147483653: "HKEY_CURRENT_CONFIG"
}

// This method replaces root key paths with their acronyms, if they exist
_reg_normalize = function (r) {
    var ret;
    ret = r.replace(/\\+/g, '\\').toUpperCase();
    ret = ret.replace('HKEY_CURRENT_USER', 'HKCU');
    ret = ret.replace('HKEY_LOCAL_MACHINE', 'HKLM');
    ret = ret.replace('HKEY_CLASSES_ROOT', 'HKCR');
    return ret;
}

// If there is an Error number, we want to log it
Object.defineProperty(Error.prototype, "number", {
    get: function () {
        ret = parseInt(this.message);
        util_log("Error.number => " + ret);
        return ret;
    }
});

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date

// Set to original value, passed in via jailme.js
Date = _date;

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear
Date.prototype._getYear = Date.prototype.getYear;
Date.prototype.getYear = function () {
    // https://msdn.microsoft.com/cs-cz/library/b9x8b9k7(v=vs.100).aspx
    // Approximate solution
    var r = this._getYear() + 1900;
    util_log("'" + this + "'.getYear() => " + r);
    return r;
}

// Interfaces that we want visibility into

// https://developer.mozilla.org/en-US/docs/Web/API/Blob
// Since we are overriding the Blob alias from node:buffer via BlobAlias to allow us to write the
//  Blob contents to disk as soon as we see it, we only need to re-implement the
// constructor
Blob = _proxy(function (array, options) {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "Blob[" + this.id + "]";

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob#instance_methods
    // We don't need to implement these

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob#instance_properties
    // We don't need to implement these

    // Constructor
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob
    // Do not log "new this._name (" because this._name is Blob[] which will break the signature "creates_blob"
    if (array === undefined && options === undefined) {
        // Don't log or else a signature will hit
        null;
    } else {
        util_log("new Blob(" + _truncateOutput(array) + ", " + options + ")");
    }

    var blob_filename = "Blob[" + this.id + "]";
    if (options && "filename" in options) {
        blob_filename = options["filename"]
        delete options["filename"]
    }

    // Assign the blob contents to the _wscript_saved_files global which will be
    // written to disk after execution
    const blob = new BlobAlias(sources=array, options=options)
    blob.arrayBuffer().then(function (result) {
        _wscript_saved_files[blob_filename] = Buffer.from(result);
    })
    return blob
});
Blob.toString = Blob.toJSON = () => {
    return "Blob"
}

// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget
EventTarget = _proxy(function () {
    // Key properties for MalwareJail
    this._id = _object_id;
    this._name = "EventTarget[" + this._id + "]";
    util_log("new " + this._name + "()");

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget#instance_methods

    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
    this.addEventListener = function (type, listener) {
        document.addEventListener(type, listener);
    }
    this.dispatchEvent = function () {
        util_log(this._name + ".dispatchEvent(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.removeEventListener = function () {
        util_log(this._name + ".removeEventListener(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
});
EventTarget.toString = EventTarget.toJSON = () => {
    return "EventTarget"
}

// https://developer.mozilla.org/en-US/docs/Web/API/Node
// Node must be declared before Element since Element inherits Node
Node = _proxy(function () {
    // Inherit EventTarget
    EventTarget.call(this);

    // Key properties for MalwareJail
    this._id = _object_id;
    this._name = "Node[" + this._id + "]";
    this._attributes = [];
    this._children = [];
    util_log("new " + this._name + "()");

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/Node#instance_methods

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild
    this.appendChild = function (e) {
        util_log(this._name + ".appendChild(" + e._name + ")");
        if (this._children.length === 0) {
            this.firstChild = e;
        }
        this._children[this._children.length] = e;
        e.parentNode = this;
        e.parentElement = this;
        if (e._attributes["src"]) {
            match = e._attributes["src"].match(encoded_base64_regex);
            if (match) {
                util_log("Base64 match, decoding...");
                _wscript_saved_files[e._name] = Buffer.from(match[1], 'base64');
            }
            else
                _wscript_saved_files[e._name] = e._attributes["src"];
        }
        return e;
    }

    this.cloneNode = function () {
        util_log(this._name + ".cloneNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.compareDocumentPosition = function () {
        util_log(this._name + ".compareDocumentPosition(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.contains = function () {
        util_log(this._name + ".contains(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getRootNode = function () {
        util_log(this._name + ".getRootNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasChildNodes = function () {
        util_log(this._name + ".hasChildNodes(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
    this.insertBefore = function (newNode, referenceNode) {
        util_log(this._name + ".insertBefore(" + newNode + ", " + referenceNode + ")");
    }

    this.isDefaultNamespace = function () {
        util_log(this._name + ".isDefaultNamespace(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.isEqualNode = function () {
        util_log(this._name + ".isEqualNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.isSameNode = function () {
        util_log(this._name + ".isSameNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.lookupNamespaceURI = function () {
        util_log(this._name + ".lookupNamespaceURI(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.lookupPrefix = function () {
        util_log(this._name + ".lookupPrefix(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.normalize = function () {
        util_log(this._name + ".normalize(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild
    this.removeChild = function (e) {
        util_log(this._name + ".removeChild(" + e._name + ")");
        return e;
    }

    this.replaceChild = function () {
        util_log(this._name + ".replaceChild(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Node#instance_properties

    _defineSingleProperty(this, "baseURI");

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes
    // _defineSingleProperty(this, "childNodes");
    // Point at the _children property
    this.childNodes = this._children;

    _defineSingleProperty(this, "firstChild");
    _defineSingleProperty(this, "isConnected");
    _defineSingleProperty(this, "lastChild");
    _defineSingleProperty(this, "nextSibling");
    _defineSingleProperty(this, "nodeName");

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
    // If this is called, it is always an Element
    // _defineSingleProperty(this, "nodeType");
    this.nodeType = 1

    _defineSingleProperty(this, "nodeValue");
    _defineSingleProperty(this, "ownerDocument");
    _defineSingleProperty(this, "parentElement");

    // Setting the parent node to itself because we're wild like that
    _defineSingleProperty(this, "parentNode");
    this._parentNode = this;

    _defineSingleProperty(this, "previousSibling");

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent
    Object.defineProperty(this, "textContent", {
        get: function () {
            item_to_return = undefined;
            if (this.text) {
                item_to_return = this.text
            } else if (this.href) {
                item_to_return = this.href
            } else if (this.innerHTML) {
                item_to_return = this.innerHTML
            } else if (this._attributes["text"]) {
                item_to_return = this._attributes["text"]
            } else if (this._attributes["href"]) {
                item_to_return = this._attributes["href"]
            }
            util_log(this._name + ".textContent returns '" + item_to_return + "'");
            if (item_to_return && typeof item_to_return !== "function") {
                match = item_to_return.match(encoded_base64_regex);
                if (match) {
                    util_log("Base64 match, decoding...");
                    _wscript_saved_files[this._name] = Buffer.from(match[1], 'base64');
                }
            }
            return item_to_return;
        },
        set: function (v) {
            util_log(this._name + ".textContent = '" + v + "'");
            this._text = v;
            match = this._text.match(encoded_base64_regex);
            if (match) {
                util_log("Base64 match, decoding...");
                _wscript_saved_files[this._name] = Buffer.from(match[1], 'base64');
            }
            return this._text;
        }
    });

    // Attr interface usage

    // https://developer.mozilla.org/en-US/docs/Web/API/Attr
    this.attr = function (name, value) {
        util_log(this._name + ".attr(" + name + ", " + value + ")");
        this._attributes[name] = value;
    }
});
Node.prototype = Object.create(EventTarget.prototype);
Node.prototype.constructor = Node;
Node.toString = Node.toJSON = () => {
    return "Node"
}

// https://developer.mozilla.org/en-US/docs/Web/API/element
Element = _proxy(function (n) {
    // Inherit Node
    Node.call(this);

    // Key properties for MalwareJail
    this._name = "Element[" + this._id + "]<" + n + ">";
    this._innerHTML = "";
    this._outerHTML = "";
    this._text = "";
    util_log("new " + this._name);

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/element#instance_methods

    this.after = function () {
        util_log(this._name + ".after(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/animate
    this.animate = function (keyframes, options) {
        util_log(this._name + ".animate(" + JSON.stringify(keyframes) + ", " + options + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/append
    this.append = function () {
        for (param of arguments) {
           this._children.push(param);
           util_log(this._name + ".append(" + param + ")");
       }
   }

    this.attachShadow = function () {
        util_log(this._name + ".attachShadow(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.before = function () {
        util_log(this._name + ".before(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.closest = function () {
        util_log(this._name + ".closest(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.computedStyleMap = function () {
        util_log(this._name + ".computedStyleMap(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getAnimations
    this.getAnimations = function (options) {
        document.getAnimations(options);
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute
    this.getAttribute = function (attributeName) {
        util_log(this._name + ".getAttribute(" + attributeName + ")");
        return this._attributes[attributeName];
    }

    this.getAttributeNames = function () {
        util_log(this._name + ".getAttributeNames(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getAttributeNode = function () {
        util_log(this._name + ".getAttributeNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getAttributeNodeNS = function () {
        util_log(this._name + ".getAttributeNodeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getAttributeNS = function () {
        util_log(this._name + ".getAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getBoundingClientRect = function () {
        util_log(this._name + ".getBoundingClientRect(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getClientRects = function () {
        util_log(this._name + ".getClientRects(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName
    this.getElementsByClassName = function (names) {
        let ret = []
        util_log(this._name + ".getElementsByClassName(" + n + ")");
        for (i = 0; i < this._children.length; i++) {
            let e = this._children[i];
            if (e.class.toLowerCase() === n.toLowerCase()) {
                ret[ret.length] = e;
            }
        }
        util_log(this._name + ".getElementsByClassName(" + n + ") ... " + ret.length + " found");
        return ret;
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName
    this.getElementsByTagName = function (tagName) {
        let ret = []
        util_log(this._name + ".getElementsByTagName(" + tagName + ")");
        for (i = 0; i < this._children.length; i++) {
            let e = this._children[i];
            if (e.elementName.toLowerCase() === tagName.toLowerCase()) {
                ret[ret.length] = e;
            }
        }
        util_log(this._name + ".getElementsByTagName(" + tagName + ") ... " + ret.length + " found");
        return ret;
    };

    this.getElementsByTagNameNS = function () {
        util_log(this._name + ".getElementsByTagNameNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasAttribute = function () {
        util_log(this._name + ".hasAttribute(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasAttributeNS = function () {
        util_log(this._name + ".hasAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasAttributes = function () {
        util_log(this._name + ".hasAttributes(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasPointerCapture = function () {
        util_log(this._name + ".hasPointerCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.insertAdjacentElement = function () {
        util_log(this._name + ".insertAdjacentElement(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
    this.insertAdjacentHTML = function (position, text) {
        util_log(this._name + ".insertAdjacentHTML(" + position + ", " + text + ")");
        // Since this method is the equivalent of writing to the DOM, we need to do the following:
        document.write(text);
    }

    this.insertAdjacentText = function () {
        util_log(this._name + ".insertAdjacentText(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.matches = function () {
        util_log(this._name + ".matches(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.msZoomTo = function () {
        util_log(this._name + ".msZoomTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.prepend = function () {
        util_log(this._name + ".prepend(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.querySelector = function () {
        util_log(this._name + ".querySelector(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.querySelectorAll = function () {
        util_log(this._name + ".querySelectorAll(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.releasePointerCapture = function () {
        util_log(this._name + ".releasePointerCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.remove = function () {
        util_log(this._name + ".remove(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.removeAttribute = function () {
        util_log(this._name + ".removeAttribute(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.removeAttributeNode = function () {
        util_log(this._name + ".removeAttributeNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.removeAttributeNS = function () {
        util_log(this._name + ".removeAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.replaceChildren = function () {
        util_log(this._name + ".replaceChildren(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.replaceWith = function () {
        util_log(this._name + ".replaceWith(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestFullscreen = function () {
        util_log(this._name + ".requestFullscreen(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestPointerLock = function () {
        util_log(this._name + ".requestPointerLock(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scroll = function () {
        util_log(this._name + ".scroll(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollBy = function () {
        util_log(this._name + ".scrollBy(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollIntoView = function () {
        util_log(this._name + ".scrollIntoView(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollIntoViewIfNeeded = function () {
        util_log(this._name + ".scrollIntoViewIfNeeded(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollTo = function () {
        util_log(this._name + ".scrollTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute
    this.setAttribute = function (n, v) {
        if (n.slice(0,5) === "data-") {
            var key = n.slice(5,);
            this._dataset = {};
            this._dataset[key] = v;
            util_log(this._name + "._dataset[" + key + "] = " + _truncateOutput(this._dataset[key]))
        } else {
            util_log(this._name + "._attributes[" + n + "] = " + _truncateOutput(v));
            this._attributes[n] = v;
        }
    }

    this.setAttributeNode = function () {
        util_log(this._name + ".setAttributeNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setAttributeNodeNS = function () {
        util_log(this._name + ".setAttributeNodeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setAttributeNS = function () {
        util_log(this._name + ".setAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setCapture = function () {
        util_log(this._name + ".setCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setHTML = function () {
        util_log(this._name + ".setHTML(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setPointerCapture = function () {
        util_log(this._name + ".setPointerCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.toggleAttribute = function () {
        util_log(this._name + ".toggleAttribute(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/element#instance_properties

    _defineSingleProperty(this, "ariaAtomic");
    _defineSingleProperty(this, "ariaAutoComplete");
    _defineSingleProperty(this, "ariaBusy");
    _defineSingleProperty(this, "ariaChecked");
    _defineSingleProperty(this, "ariaColCount");
    _defineSingleProperty(this, "ariaColIndex");
    _defineSingleProperty(this, "ariaColSpan");
    _defineSingleProperty(this, "ariaCurrent");
    _defineSingleProperty(this, "ariaDescription");
    _defineSingleProperty(this, "ariaDisabled");
    _defineSingleProperty(this, "ariaExpanded");
    _defineSingleProperty(this, "ariaHasPopup");
    _defineSingleProperty(this, "ariaHidden");
    _defineSingleProperty(this, "ariaKeyShortcuts");
    _defineSingleProperty(this, "ariaLabel");
    _defineSingleProperty(this, "ariaLevel");
    _defineSingleProperty(this, "ariaLive");
    _defineSingleProperty(this, "ariaModal");
    _defineSingleProperty(this, "ariaMultiLine");
    _defineSingleProperty(this, "ariaMultiSelectable");
    _defineSingleProperty(this, "ariaOrientation");
    _defineSingleProperty(this, "ariaPlaceholder");
    _defineSingleProperty(this, "ariaPosInSet");
    _defineSingleProperty(this, "ariaPressed");
    _defineSingleProperty(this, "ariaReadOnly");
    _defineSingleProperty(this, "ariaRelevant");
    _defineSingleProperty(this, "ariaRequired");
    _defineSingleProperty(this, "ariaRoleDescription");
    _defineSingleProperty(this, "ariaRowCount");
    _defineSingleProperty(this, "ariaRowIndex");
    _defineSingleProperty(this, "ariaRowSpan");
    _defineSingleProperty(this, "ariaSelected");
    _defineSingleProperty(this, "ariaSetSize");
    _defineSingleProperty(this, "ariaSort");
    _defineSingleProperty(this, "ariaValueMax");
    _defineSingleProperty(this, "ariaValueMin");
    _defineSingleProperty(this, "ariaValueNow");
    _defineSingleProperty(this, "ariaValueText");
    _defineSingleProperty(this, "assignedSlot");

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes
    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "attributes");
    this.attributes = this._attributes;

    _defineSingleProperty(this, "childElementCount");

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/children
    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "children");
    this.children = this._children;

    _defineSingleProperty(this, "classList");

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/className
    Object.defineProperty(this, "className", {
        get: function () {
            var classname = undefined;

            if ("class" in this._attributes) {
                classname = this._attributes["class"];
            } else if (this.class) {
                classname = this.class;
            }

            if (classname) {
                util_log(this._name + ".className() => (" + typeof classname + ") => " + classname);
                return classname;
            }
        },
        set: function (value) {
            this.class = value;
        }
    });

    _defineSingleProperty(this, "clientHeight");
    _defineSingleProperty(this, "clientLeft");
    _defineSingleProperty(this, "clientTop");
    _defineSingleProperty(this, "clientWidth");
    _defineSingleProperty(this, "elementTiming");
    _defineSingleProperty(this, "firstElementChild");

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/id
    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "id");
    this.id = this._id;

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML
    Object.defineProperty(this, "innerHTML", {
        get: function () {
            let innerHTML = "";
            if (this._innerHTML) {
                util_log(this._name + ".innerHTML returns '" + _truncateOutput(this._innerHTML) + "'");
                innerHTML = this._innerHTML;
            } else if (this._text) {
                util_log(this._name + ".innerHTML returns '" + _truncateOutput(this._text) + "'");
                innerHTML = this._text;
            }
            return innerHTML;
        },
        set: function (v) {
            util_log(this._name + ".innerHTML = '" + v + "'");
            this._innerHTML = _decodeHTML(v);
            document.write(this._innerHTML);
        }
    });

    _defineSingleProperty(this, "lastElementChild");
    _defineSingleProperty(this, "localName");
    _defineSingleProperty(this, "msRegionOverflow");
    _defineSingleProperty(this, "namespaceURI");
    _defineSingleProperty(this, "nextElementSibling");

    // Point to _outerHTML property
    // _defineSingleProperty(this, "outerhtml");
    this.outerhtml = this._outerHTML;

    _defineSingleProperty(this, "part");
    _defineSingleProperty(this, "prefix");
    _defineSingleProperty(this, "previousElementSibling");
    _defineSingleProperty(this, "scrollHeight");
    _defineSingleProperty(this, "scrollLeft");
    _defineSingleProperty(this, "scrollLeftMax");
    _defineSingleProperty(this, "scrollTop");
    _defineSingleProperty(this, "scrollTopMax");
    _defineSingleProperty(this, "scrollWidth");
    _defineSingleProperty(this, "shadowRoot");
    _defineSingleProperty(this, "slot");

    // Point tagName to _nodename property
    _defineSingleProperty(this, "tagName", "_nodename");
    this.tagname = n;

    // XML DOM

    // https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms762308(v=vs.85)
    Object.defineProperty(this, "nodetypedvalue", {
        get: function () {
            util_log(this._name + ".nodeTypedValue");
            if (this.dataType === "bin.base64") {
                //return new Buffer(this.text, 'base64').toString('binary');
                return Buffer.from(this._text, "base64");
            } else {
                return this._text;
            }
        }
    });

    // HTMLElement

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText
    _defineSingleProperty(this, "innertext", "_text");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText
    _defineSingleProperty(this, "outertext", "_text");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset
    _defineSingleProperty(this, "dataset");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click
    this.click = function (fn) {
        util_log(this._name + ".click(" + fn + ")");
        if (fn) {
            e = _proxy(new Event("click"));
            document._events.push(e);
            fn(e);
        }
        else if (this.href || this._attributes["href"]) {
            // If there was no function passed to the click method and an href exists,
            // then we should click the href
            if (this.href) {
                href = this.href;
            } else {
                href = this._attributes["href"];
            }

            if (this._attributes["download"]) {
                file_name = this._attributes["download"];
            } else {
                file_name = this._name;
            }

            match = href.match(encoded_base64_regex);
            if (match) {
                util_log("Base64 match, decoding to " + file_name + " ...");
                _wscript_saved_files[file_name] = Buffer.from(match[1], 'base64');
            } else {
                util_log(">>> FIXME: Possible href '" + href + "' to be clicked that wasn't base64-encoded");
            }
        }
        else util_log(">>> FIXME: Missed opportunity in .click()");
    }

    // Helpful methods
    this.toString = function () {
        return this._name;
    }

    // Global attributes

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#style
    _defineSingleProperty(this, "style", "_style");
    this.style = new Style();

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
    this.is = function (attr) {
        util_log(this._name + ".is(" + attr + ")");
        return true;
    };

    // HTMLCanvasElement

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
    this.getContext = function () {
        util_log(this._name + ".getContext(" + arguments + ")");
    }

    // Internet Explorer API

    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa703983(v=vs.85)
    this.doScroll = function () {
        util_log(this._name + ".doScroll(" + arguments + ")");
    }

    // jQuery

    // https://api.jquery.com/hide/
    this.hide = function () {
        util_log(this._name + ".hide()");
    }

    // https://api.jquery.com/show/
    this.show = function () {
        util_log(this._name + ".show()");
    }

    // https://api.jquery.com/toggle/
    this.toggle = function () {
        util_log(this._name + ".toggle()");
    }

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes

    this.onabort = function (listener) {
        this.addEventListener("abort", listener);
    }
    this.onautocomplete = function (listener) {
        this.addEventListener("autocomplete", listener);
    }
    this.onautocompleteerror = function (listener) {
        this.addEventListener("autocompleteerror", listener);
    }
    this.onblur = function (listener) {
        this.addEventListener("blur", listener);
    }
    this.oncancel = function (listener) {
        this.addEventListener("cancel", listener);
    }
    this.oncanplay = function (listener) {
        this.addEventListener("canplay", listener);
    }
    this.oncanplaythrough = function (listener) {
        this.addEventListener("canplaythrough", listener);
    }
    this.onchange = function (listener) {
        this.addEventListener("change", listener);
    }
    this.onclick = function (listener) {
        this.addEventListener("click", listener);
    }
    this.onclose = function (listener) {
        this.addEventListener("close", listener);
    }
    this.oncontextmenu = function (listener) {
        this.addEventListener("contextmenu", listener);
    }
    this.oncuechange = function (listener) {
        this.addEventListener("cuechange", listener);
    }
    this.ondblclick = function (listener) {
        this.addEventListener("dblclick", listener);
    }
    this.ondrag = function (listener) {
        this.addEventListener("drag", listener);
    }
    this.ondragend = function (listener) {
        this.addEventListener("dragend", listener);
    }
    this.ondragenter = function (listener) {
        this.addEventListener("dragenter", listener);
    }
    this.ondragleave = function (listener) {
        this.addEventListener("dragleave", listener);
    }
    this.ondragover = function (listener) {
        this.addEventListener("dragover", listener);
    }
    this.ondragstart = function (listener) {
        this.addEventListener("dragstart", listener);
    }
    this.ondrop = function (listener) {
        this.addEventListener("drop", listener);
    }
    this.ondurationchange = function (listener) {
        this.addEventListener("durationchange", listener);
    }
    this.onemptied = function (listener) {
        this.addEventListener("emptied", listener);
    }
    this.onended = function (listener) {
        this.addEventListener("ended", listener);
    }
    this.onerror = function (listener) {
        this.addEventListener("error", listener);
    }
    this.onfocus = function (listener) {
        this.addEventListener("focus", listener);
    }
    this.oninput = function (listener) {
        this.addEventListener("input", listener);
    }
    this.oninvalid = function (listener) {
        this.addEventListener("invalid", listener);
    }

    Object.defineProperty(this, "onkeydown", {
        get: function (listener) {
            this.addEventListener("keydown", listener);
        },
        set: function (listener) {
            util_log("onkeydown = " + _truncateOutput(listener));
            this.addEventListener("keydown", listener);
        }
    });

    this.onkeypress = function (listener) {
        this.addEventListener("keypress", listener);
    }
    this.onkeyup = function (listener) {
        this.addEventListener("keyup", listener);
    }
    this.onload = function (listener) {
        this.addEventListener("load", listener);
    }
    this.onloadeddata = function (listener) {
        this.addEventListener("loadeddata", listener);
    }
    this.onloadedmetadata = function (listener) {
        this.addEventListener("loadedmetadata", listener);
    }
    this.onloadstart = function (listener) {
        this.addEventListener("loadstart", listener);
    }
    this.onmousedown = function (listener) {
        this.addEventListener("mousedown", listener);
    }
    this.onmouseenter = function (listener) {
        this.addEventListener("mouseenter", listener);
    }
    this.onmouseleave = function (listener) {
        this.addEventListener("mouseleave", listener);
    }
    this.onmousemove = function (listener) {
        this.addEventListener("mousemove", listener);
    }
    this.onmouseout = function (listener) {
        this.addEventListener("mouseout", listener);
    }
    this.onmouseover = function (listener) {
        this.addEventListener("mouseover", listener);
    }
    this.onmouseup = function (listener) {
        this.addEventListener("mouseup", listener);
    }
    this.onmousewheel = function (listener) {
        this.addEventListener("mousewheel", listener);
    }
    this.onpause = function (listener) {
        this.addEventListener("pause", listener);
    }
    this.onplay = function (listener) {
        this.addEventListener("play", listener);
    }
    this.onplaying = function (listener) {
        this.addEventListener("playing", listener);
    }
    this.onprogress = function (listener) {
        this.addEventListener("progress", listener);
    }
    this.onratechange = function (listener) {
        this.addEventListener("ratechange", listener);
    }
    this.onreset = function (listener) {
        this.addEventListener("reset", listener);
    }
    this.onresize = function (listener) {
        this.addEventListener("resize", listener);
    }
    this.onscroll = function (listener) {
        this.addEventListener("scroll", listener);
    }
    this.onseeked = function (listener) {
        this.addEventListener("seeked", listener);
    }
    this.onseeking = function (listener) {
        this.addEventListener("seeking", listener);
    }
    this.onselect = function (listener) {
        this.addEventListener("select", listener);
    }
    this.onshow = function (listener) {
        this.addEventListener("show", listener);
    }
    this.onsort = function (listener) {
        this.addEventListener("sort", listener);
    }
    this.onstalled = function (listener) {
        this.addEventListener("stalled", listener);
    }
    this.onsubmit = function (listener) {
        this.addEventListener("submit", listener);
    }
    this.onsuspend = function (listener) {
        this.addEventListener("suspend", listener);
    }
    this.ontimeupdate = function (listener) {
        this.addEventListener("timeupdate", listener);
    }
    this.ontoggle = function (listener) {
        this.addEventListener("toggle", listener);
    }
    this.onvolumechange = function (listener) {
        this.addEventListener("volumechange", listener);
    }
    this.onwaiting = function (listener) {
        this.addEventListener("waiting", listener);
    }

    // Not sure what these properties are
    _defineSingleProperty(this, "elementname", "_nodename");
    _defineSingleProperty(this, "class");
    _defineSingleProperty(this, "_vgRuntimeStyle");

    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            match = this._text.match(encoded_base64_regex);
            if (match) {
                util_log("Base64 match, decoding...");
                _wscript_saved_files[this._name] = Buffer.from(match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            match = this._text.match(encoded_base64_regex);
            if (match) {
                util_log("Base64 match, decoding...");
                _wscript_saved_files[this._name] = Buffer.from(match[1], 'base64');
            }
            return this._text;
        }
    });

    Object.defineProperty(this, "text", {
        // I have no idea why text is a callable method... but hey it works!
        get: function () {
            util_log(this._name + ".text() => () => " + this._text);
            return function () {
                return this._text;
            }
        },
        set: function (v) {
            util_log(this._name + ".text = '" + v + "'");
            this._text = v;
        }
    });
    Object.defineProperty(this, "css", {
        // I have no idea why text is a callable method... but hey it works!
        get: function () {
            util_log(this._name + ".css()");
            return function () {
                util_log(this._name + ".css(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
            }
        },
        set: function (v) {
            util_log(this._name + ".css = '" + v + "'");
            util_log(arguments);
        }
    });

    // Not sure what these methods are
    this.html = function () {
        util_log(this._name + ".html(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    };

    // This method is related to Input elements, but is undocumented
    this.val = function () {
        val = this.value;
        if (val === undefined) {
            // Look for an input element where the value is defined
            for (e of document._elements) {
                if ("value" in e && e.value) {
                    util_log("Found an Input element with a 'value'...");
                    val = e.value;
                    break;
                }
            }
        }
        util_log(this._name + ".val() => " + val);
        return val;
    }
});
Element.prototype = Object.create(Node.prototype);
Element.prototype.constructor = Element;
Element.toString = Element.toJSON = () => {
    return "Element"
}

// https://developer.mozilla.org/en-US/docs/Web/API/File
File = _proxy(function (bits, name, options = undefined) {
    Blob.call(this);

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/File#instance_methods
    // All instance methods are inherited from the Blob interface

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/File#instance_properties

    _defineSingleProperty(this, "lastModified")
    _defineSingleProperty(this, "lastModifiedDate")

    // We cannot define this because it is already assigned as a private field for MalwareJail's usage in the Blob interface
    // _defineSingleProperty(this, "name")
    _defineSingleProperty(this, "webkitRelativePath")

    // File implements Blob, so the following properties are inherited from the Blob interface
    // _defineSingleProperty(this, "size")
    // _defineSingleProperty(this, "type")

    // Constructor
    // https://developer.mozilla.org/en-US/docs/Web/API/File/File
    util_log("new File(" + bits + ", " + name + ", " + options + ")")
    options["filename"] = name;
    const blob = new Blob(bits, options);

    // We don't need to write the contents to a _wscript_save_file because the Blob class already does that...
    return blob;
});
File.prototype = Object.create(Blob.prototype);
File.prototype.constructor = File;
File.toString = File.toJSON = () => {
    return "File"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement
HTMLElement = _proxy(function (n) {
    Element.call(this, n);
    this._name = "HTMLElement[" + this._id + "]";
    util_log("new " + this._name + "(" + n + ")");
});
HTMLElement.prototype = Object.create(Element.prototype);
HTMLElement.prototype.constructor = HTMLElement;
HTMLElement.toString = HTMLElement.toJSON = () => {
    return "HTMLElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement
HTMLIFrameElement = _proxy(function () {
    util_log("new HTMLIFrameElement() start");
    HTMLElement.call(this, "iframe");
    this._name = "HTMLIFrameElement[" + this._id + "]";
    util_log("new " + this._name + "()");
    this.contentdocument = new Document();
    this.contentwindow = {
        document: this.contentDocument
    }
    util_log("new HTMLIFrameElement() end");
})
HTMLIFrameElement.prototype = Object.create(HTMLElement.prototype);
HTMLIFrameElement.prototype.constructor = HTMLIFrameElement;
HTMLIFrameElement.toString = HTMLIFrameElement.toJSON = () => {
    return "HTMLIFrameElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/URL/URL
// Since we are overriding the URL alias from node:url via URLAlias to allow us to write the
//  URL contents to disk as soon as we see it, we only need to re-implement the
// constructor
URL = function () {
    util_log("new URL(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    const url = arguments[0];
    return new URLAlias(url);
}

// https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
URL.createObjectURL = function () {
    util_log("URL.createObjectURL(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    const object = arguments[0]
    return URLAlias.createObjectURL(object);
}

// https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
URL.revokeObjectURL = function () {
    util_log("URL.revokeObjectURL(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    const objectURL = arguments[0]
    return URLAlias.revokeObjectURL(objectURL);
}

// https://nodejs.org/api/worker_threads.html#class-worker
// Since we are overriding the Worker alias from node:worker_threads via WorkerAlias to allow us to write the
//  Worker contents to disk as soon as we see it, we only need to re-implement the
// constructor
Worker = function () {
    const _id = _object_id++;
    var file_path = arguments[0]
    if (file_path.slice(0, 5) === "blob:") {
        // Worker expects a file path, not a Blob ID
        // Therefore write the blob content to disk
        file_name = "Blob[" + _id + "]";
        file_path = _save_files + file_name;
        const blob = resolveObjectURL(arguments[0])
        blob.arrayBuffer().then(function (result) {
            content = Buffer.from(result)
            fs.writeFile(filename=file_path, data=content, function (err) {
                if (err) return util_log(err)
            });
        });
        util_log("new Worker(" + file_name + ")")
    } else {
        util_log("new Worker(" + file_path + ")")
    }
    return new WorkerAlias(file_path)
}

// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
// Pretty much a copy of MSXML2_XMLHTTP
XMLHttpRequest = _proxy(function () {
    this.id = _object_id++;
    this._name = "XMLHttpRequest[" + this.id + "]";
    util_log("new " + this._name);
    let self = this;
    this.toString = this.tostring = () => {
        return this._name
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open
    this.open = function (method, url, async, user, password) {
        url = url.replace(/\r|\n/g, "");
        util_log(this._name + _truncateOutput((".open(" + method + "," + url + "," + async + ")")));
        match = url.match(encoded_base64_regex);
        if (match) {
            util_log("Base64 match, decoding...");
            _wscript_saved_files[this._name] = Buffer.from(match[1], 'base64');
        }
        this.method = method;
        this.url = url;
        switch (("" + async).toLowerCase()) {
            case "false":
            case "no":
            case "0":
            case "":
            case "undefined":
            case null:
                this.async = false;
                break;
            default:
                this.async = true;
        }
        // TODO: exit if URL seen x times
        this._wscript_urls_index = _wscript_urls.length
        _wscript_urls[this._wscript_urls_index] = { "url": url, "method": method };
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send
    this.send = function (body) {
        if (body == undefined) {
            util_log(this._name + ".send()");
        } else {
            util_log(this._name + ".send(" + JSON.stringify(body) + ")");
        }
        if (_download === "Yes") {
            try {
                var res = _sync_request(this.method, this.url, {
                    'headers': this._headers
                });
                //util_log("Sync_req: " + _truncateOutput(res.getBody()));
                this.status = res.statusCode || 0;
                this.readystate = 4;
                this.statustext = "OK";
                this.responsebody = res.body || "";
                this.allresponseheaders = JSON.stringify(res.headers) || "";
            } catch (err) {
                util_log(this._name + ".send() Exception: " + _truncateOutput(_inspect(err)));
                this.status = err.statusCode || 0;
                this.readystate = 4;
                this.statustext = err.toString();
                this.responsebody = err.body || "";
                this.allresponseheaders = JSON.stringify(err.headers) || "";
            }
            if (this._wscript_urls_index != null) {
                _wscript_urls[this._wscript_urls_index]["status"] = this.status;
                _wscript_urls[this._wscript_urls_index]["response_headers"] = this.allresponseheaders;
                _wscript_urls[this._wscript_urls_index]["response_body"] = _truncateOutput(this.responsebody);
                _wscript_urls[this._wscript_urls_index]["request_body"] = a;
                _wscript_urls[this._wscript_urls_index]["statustext"] = this.statustext;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readystatechange_event
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
            return;
        } else if (_download === "No") {
            util_log(this._name + " Not sending data, if you want to interact with remote server, set --down");
            var s = 'MZ'
            for (var ii = 0; ii < 200; ii++) {
                s += 'Dummy content, use --down to download the real payload.\n';
            }
            this.responsebody = s;
            this.status = 200;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange() with dummy data");
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
        } else if (_download === "Return HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
        } else if (_download === "Throw HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404 & throwing exception");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
            throw new Error("XMLHttpRequest.send intentionally throwing exception");
        } else {
            util_log(">>> FIXME: XMLHttpRequest.send _download '" + _download + "' not handled");
            throw new TypeError(">>> FIXME: XMLHttpRequest.send _download '" + _download + "' not handled");
        }
        util_log(this._name + ".send(" + JSON.stringify(body) + ") finished");
    }
});
XMLHttpRequest.toString = XMLHttpRequest.toJSON = () => {
    return "XMLHttpRequest"
}

// https://developer.mozilla.org/en-US/docs/Web/API/XPathResult
XPathResult = function () {
    return XPathResult;
}

// Visual Basic for Applications (VBA) Objects

// https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/dn423948(v=vs.85)?redirectedfrom=MSDN
ActiveXObject = function (a) {
    util_log("ActiveXObject(" + a + ")");
    return create_object(a);
};
ActiveXObject.toString = ActiveXObject.toJSON = () => {
    return "ActiveXObject"
}

// https://learn.microsoft.com/en-us/office/vba/language/glossary/vbe-glossary#automation-object
AutomationObject = _proxy(function (a, b) {
    this.id = _object_id++;
    this._name = "AutomationObject[" + this.id + "](" + a + ", " + b + ")";
    this.UserName = "buddy";
    util_log("new " + this._name);
    this.execquery = function () {
        var ret = "Unknown";
        var a = Array.prototype.slice.call(arguments, 0).join(",");
        qry = arguments[0].toUpperCase();
        if (qry === "SELECT * FROM WIN32_OPERATINGSYSTEM") {
            ret = [{
                "BootDevice": "\\Device\\HarddiskVolume1",
                "BuildNumber": "14393",
                "BuildType": "Multiprocessor Free",
                "Caption": "Microsoft Windows 10 Pro",
                "CodeSet": "1250",
                "CountryCode": "420",
                "CreationClassName": "Win32_OperatingSystem",
                "CSCreationClassName": "Win32_ComputerSystem",
                "CSDVersion": "null",
                "CSName": "CARBON",
                "CurrentTimeZone": "60",
                "DataExecutionPrevention_32BitApplications": "true",
                "DataExecutionPrevention_Available": "true",
                "DataExecutionPrevention_Drivers": "true",
                "DataExecutionPrevention_SupportPolicy": "2",
                "Debug": "false",
                "Description": "Carbon",
                "Distributed": "false",
                "EncryptionLevel": "256",
                "ForegroundApplicationBoost": "2",
                "FreePhysicalMemory": "4095708",
                "FreeSpaceInPagingFiles": "1192496",
                "FreeVirtualMemory": "4011584",
                "InstallDate": "9/4/2016 03:00:28",
                "LargeSystemCache": "null",
                "LastBootUpTime": "10/30/2016 00:06:03",
                "LocalDateTime": "11/1/2016 00:30:15",
                "Locale": "0405",
                "Manufacturer": "Microsoft Corporation",
                "MaxNumberOfProcesses": "-1",
                "MaxProcessMemorySize": "137438953344",
                "Name": "Microsoft Windows 10 Pro|C:\\WINDOWS|\\Device\\Harddisk0\\Partition2",
                "NumberOfLicensedUsers": "null",
                "NumberOfProcesses": "153",
                "NumberOfUsers": "2",
                "Organization": "",
                "OSLanguage": "0409",
                /* "1033", */
                "OSProductSuite": "256",
                "OSType": "18",
                "OtherTypeDescription": "null",
                "PlusProductID": "null",
                "PlusVersionNumber": "null",
                "Primary": "true",
                "ProductType": "1",
                "QuantumLength": "undefined",
                "QuantumType": "undefined",
                "RegisteredUser": "Uzivatel",
                "SerialNumber": "00330-80000-00000-AA676",
                "ServicePackMajorVersion": "0",
                "ServicePackMinorVersion": "0",
                "SizeStoredInPagingFiles": "1245184",
                "Status": "OK",
                "SuiteMask": "272",
                "SystemDevice": "\\Device\\HarddiskVolume2",
                "SystemDirectory": "C:\\WINDOWS\\system32",
                "SystemDrive": "C:",
                "TotalSwapSpaceSize": "null",
                "TotalVirtualMemorySize": "9306340",
                "TotalVisibleMemorySize": "8061156",
                "Version": "10.0.14393",
                "WindowsDirectory": "C:\\WINDOWS"
            }];
        }
        else if (qry.indexOf("SELECT * FROM WIN32_PROCESS") >= 0) {
            //FIXME: parse query to get the process name
            ret = new Collection([new Process("app.exe")]);
        }
        else if (qry === "SELECT * FROM WIN32_LOGICALDISK") {
            ret = [{
                "Access": "0",
                "Availability": "",
                "BlockSize": "",
                "Caption": "C:",
                "Compressed": "FALSE",
                "ConfigManagerErrorCode": "",
                "ConfigManagerUserConfig": "",
                "CreationClassName": "Win32_LogicalDisk",
                "Description": "Local Fixed Disk",
                "DeviceID": "C:",
                "DriveType": "3",
                "ErrorCleared": "",
                "ErrorDescription": "",
                "ErrorMethodology": "",
                "FileSystem": "NTFS",
                "FreeSpace": "611749265408",
                "InstallDate": "",
                "LastErrorCode": "",
                "MaximumComponentLength": "255",
                "MediaType": "12",
                "Name": "C:",
                "NumberOfBlocks": "",
                "PNPDeviceID": "",
                "PowerManagementCapabilities": "",
                "PowerManagementSupported": "",
                "ProviderName": "",
                "Purpose": "",
                "QuotasDisabled": "",
                "QuotasIncomplete": "",
                "QuotasRebuilding": "",
                "Size": "1013309239296",
                "Status": "",
                "StatusInfo": "",
                "SupportsDiskQuotas": "FALSE",
                "SupportsFileBasedCompression": "TRUE",
                "SystemCreationClassName": "Win32_ComputerSystem",
                "SystemName": "BLAH-BLAH8l44",
                "VolumeDirty": "",
                "VolumeName": "Windows",
                "VolumeSerialNumber": "BLAHBLAH",
            }];
        }
        else if (qry.indexOf("SELECT * FROM ANTIVIRUSPRODUCT") >= 0) {
            ret = [{
                "DisplayName": "INSECURE_AS_HECK"
            }];
        }
        else if (qry.indexOf("SELECT DISPLAYNAME, PRODUCTSTATE FROM ANTIVIRUSPRODUCT") >= 0) {
            ret = [{
                "displayName": "INSECURE_AS_HECK",
                "productState": "INSECURE_AS_HECK"
            }];
        }
        _wscript_wmis[_wscript_wmis.length] = { "arguments": arguments, "return": ret }
        util_log(this._name + ".ExecQuery(" + a + ") => " + _truncateOutput(_inspect(ret)));
        return ret;
    }
    this.InstancesOf = function (thing) {
        util_log(thing);
        if (thing.toLowerCase() == "win32_logicaldisk") {
            return this.execquery("SELECT * FROM WIN32_LOGICALDISK");
        }
        else if (thing.toLowerCase() == "win32_operatingsystem") {
            return this.execquery("SELECT * FROM WIN32_OPERATINGSYSTEM");
        }
        else if (thing.toLowerCase() == "win32_process") {
            return this.execquery("SELECT * FROM WIN32_PROCESS");
        }
        else if (thing.toLowerCase() == "antivirusproduct") {
            return this.execquery("SELECT * FROM ANTIVIRUSPRODUCT");
        }
    }
    // https://learn.microsoft.com/en-us/previous-versions/windows/desktop/regprov/setdwordvalue-method-in-class-stdregprov
    this.SetDwordValue = function (hDefKey, sSubKeyName, sValueName, uValue) {
        util_log(this._name + ".SetDwordValue(" + hDefKey + ", " + sSubKeyName + ", " + sValueName + ", " + uValue + ")");
        let absolute_key_path = REGDEFKEY_MAP[hDefKey] + "\\" + sSubKeyName + "\\" + sValueName;
        let normalized_key_path = _reg_normalize(absolute_key_path);
        REG[normalized_key_path] = uValue;
    }
});
AutomationObject.toString = AutomationObject.toJSON = () => {
    return "AutomationObject";
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/createobject-function
var create_object = _proxy(function (a) {
    var ret = null;
    a = a.toLowerCase();
    if (a.startsWith("winhttp.winhttprequest") ||
        a.startsWith("msxml2.serverxmlhttp")) {
        ret = new MSXML2_XMLHTTP();
    } else if (a.startsWith("msxml2.domdocument")) {
        ret = new Msxml2_DOMDocument_6_0();
    } else {
        switch (a) {
            case "shell.application":
                ret = new Shell_Application();
                break;
            case "scripting.filesystemobject":
                ret = new FileSystemObject();
                break;
            case "wscript.shell":
                ret = new WScript_Shell();
                break;
            case "wscript.network":
                ret = new WScript_Network();
                break;
            case "vbscript.regexp":
                ret = new VBScript_RegExp();
                break;
            case "adodb.stream":
                ret = new ADODB_Stream();
                break;
            case "adodb.recordset":
            case "ador.recordset":
                ret = new ADODB_Recordset();
                break;
            case "msxml2.xmlhttp":
                ret = new MSXML2_XMLHTTP();
                break;
            case "scripting.dictionary":
                ret = new Scripting_Dictionary();
                break;
            case "msscriptcontrol.scriptcontrol":
                ret = new MSScriptControl_ScriptControl();
                break;
            case "microsoft.xmlhttp":
                ret = new MSXML2_XMLHTTP();
                break;
            case "system.text.asciiencoding":
                ret = new System_Text_ASCIIEncoding();
                break;
            case "system.security.cryptography.frombase64transform":
                ret = new System_Security_Cryptography_FromBase64Transform();
                break;
            case "system.io.memorystream":
                ret = new System_IO_MemoryStream();
                break;
            case "system.runtime.serialization.formatters.binary.binaryformatter":
                ret = new System_Runtime_Serialization_Formatters_Binary_Binaryformatter();
                break;
            case "system.collections.arraylist":
                ret = new System_Collections_ArrayList();
                break;
            case "microsoft.xmldom":
                ret = new Msxml2_DOMDocument_6_0();
                break;
            case "internetexplorer.application":
                ret = new InternetExplorer_Application();
                break
            case "windowsinstaller.installer":
                ret = new WindowsInstaller_Installer();
                break;
            default:
                util_log(">>> FIXME: WScript.CreateObject: type '" + a + "' not handled");
                ret = null;
                throw new TypeError("WScript.CreateObject: Could not locate automation class named " + a);
        }
    }
    _wscript_objects[_wscript_objects.length] = ret;
    return ret;
});
create_object.toString = create_object.toJSON = () => {
    return "create_object"
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/collection-object
Collection = _proxy(function (init = undefined) {
    this.id = _object_id++;
    this._name = "Collection[" + this.id + "]";
    util_log("new " + this._name + "(" + _truncateOutput(_inspect(init)) + ")");
    if (!init)
        this._items = _proxy([]);
    else
        this._items = _proxy(init);

    _defineSingleProperty(this, "count");
    this.count = this._items.length;
    this.add = function (a) {
        util_log(this._name + ".add(" + a + ")");
        this._items[this._items.length] = a;
        this.count = this._items.length;
    }
    this.toString = function () {
        return this._name;
    }
    this.toJSON = function () {
        return this.toString();
    }
    this.inspect = function () {
        return this.toString();
    }
    return this._items;
});
Collection.toString = Collection.toJSON = () => {
    return "Collection";
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/enum-statement
Enumerator = _proxy(function (a) {
    this.id = _object_id++;
    this._enum = a;
    this._index = 0;
    this._name = "Enumerator[" + this.id + "]";
    util_log("new " + this._name + " for " + _truncateOutput(_inspect(a)));
    this.atend = function () {
        var r = (this._index === this._enum.length);
        //util_log(this._name + ".atEnd() => "+ r);
        return r;
    };
    this.movenext = function () {
        this._index++;
    };
    this.item = function () {
        var ret = this._enum[this._index];
        let n = this._name + ".item(" + this._index + ")";
        util_log(n + " => " + _truncateOutput(_inspect(ret)));
        if (typeof ret === 'object')
            ret = _proxy(ret, true, n)
        return ret;
    }
});
Enumerator.toString = Enumerator.toJSON = () => {
    return "Enumerator";
}
Enumerator.prototype.toString = function () {
    return this._name;
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/drive-object
DriveObject = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "DriveObject[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "name", "_drive_name");
    _defineSingleProperty(this, "availablespace");
    _defineSingleProperty(this, "driveletter");
    _defineSingleProperty(this, "drivetype");
    _defineSingleProperty(this, "filesystem");
    _defineSingleProperty(this, "freespace");
    _defineSingleProperty(this, "isready");
    _defineSingleProperty(this, "path");
    _defineSingleProperty(this, "rootfolder");
    _defineSingleProperty(this, "serialnumber");
    _defineSingleProperty(this, "totalsize");
    _defineSingleProperty(this, "volumename");
    var a = win32.parse(d);

    this.name = d;

    this.toString = function () {
        return this._name;
    }
});
DriveObject.toString = DriveObject.toJSON = () => {
    return "DriveObject"
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/file-object
FileObject = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "FileObject[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "shortpath");
    this._shortpath = d;
    _defineSingleProperty(this, "attributes");
    _defineSingleProperty(this, "datelastmodified");
    this._datelastmodified = new Date();
    this.openastextstream = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".OpenAsTextStream(" + a + ")");
        return new TextStream();
    }
    this.toString = function () {
        return this._name;
    }
});
FileObject.toString = FileObject.toJSON = () => {
    return "FileObject"
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/filesystemobject-object
FileSystemObject = _proxy(function () {
    this.id = _object_id++;
    this._name = "Scripting.FileSystemObject[" + this.id + "]";
    util_log("new " + this._name);
    this.toString = function () {
        return this._name;
    }
    this.createtextfile = function (filename) { //(filename[, overwrite[, unicode]])
        util_log(this._name + ".CreateTextFile(" + filename + ")");
        return new TextStream(filename);
    }
    this.opentextfile = function (filename) { //(filename[, iomode[, create[, format]]])
        util_log(this._name + ".OpenTextFile(" + filename + ")");
        return new TextStream(filename);
    }
    this.getfileversion = function (f) {
        util_log(this._name + ".GetFileVersion(" + f + ")");
        return "1.0";
    }
    this.getbasename = function (f) {
        var ret = win32.basename(f);
        util_log(this._name + ".GetBaseName(" + f + ") => " + ret);
        return ret;
    }
    this.buildpath = function () {
        util_log(this._name + ".BuildPath(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        return Array.prototype.slice.call(arguments, 0).join("\\");
    }
    this.getdrive = function (drivespec) {
        util_log(this._name + ".GetDrive(" + drivespec + ")");
        return new DriveObject(drivespec);
    }
    this.getdrivename = function (path) {
        util_log(this._name + ".GetDriveName(" + _truncateOutput(path) + ")");
        return path[0]; //Fixme
    }
    _defineSingleProperty(this, "drives");
    this._drives = new Collection([new DriveObject("C:")]);
    this.fileexists = function (f) {
        var ret = false;
        var abs = win32.isAbsolute(f);
        if (!abs)
            util_log("FIXME: " + this._name + ".FileExists(" + f + ") - relative path");
        var parts = win32.normalize(f).split(win32.sep);
        var t = FS;
        for (let p of parts) {
            if (p === "")
                continue;
            t = t[p.toUpperCase()];
            if (typeof t === "undefined")
                break;
        }
        if (typeof t !== "undefined")
            ret = true;
        if (!ret && _options.FileAlwaysExists) {
            util_log("FileExists: " + ret + " overridden with FileAlwaysExists: true");
            ret = true;
        }
        util_log(this._name + ".FileExists(" + f + ") => " + ret);
        return ret;
    }
    this.folderexists = function (f) {
        var ret = false;
        f = "" + f;
        var abs = win32.isAbsolute(f);
        if (!abs)
            util_log("FIXME: " + this._name + ".FolderExists(" + _truncateOutput(f) + ") - relative path");
        var parts = win32.normalize(f).split(win32.sep);
        var t = FS;
        for (let p of parts) {
            if (p === "")
                continue;
            t = t[p.toUpperCase()];
            if (typeof t === "undefined")
                break;
        }
        if (typeof t !== "undefined")
            ret = true;
        util_log(this._name + ".FolderExists(" + _truncateOutput(f) + ") => " + ret);
        return ret;
    }
    this.deletefile = function (f) {
        util_log(this._name + ".DeleteFile(" + f + ")");
        return true;
    }
    this.copyfile = function (f1, f2) {
        util_log(this._name + ".CopyFile(" + f1 + ", " + f2 + ")");
        return true;
    }
    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/getfolder-method
    this.getfolder = function (d) {
        d1 = win32.normalize(d);
        util_log(this._name + ".GetFolder(" + d + ") => " + d1);
        return new FolderObject(d1);
    }
    this.getfile = function (d) {
        d1 = win32.normalize(d);
        util_log(this._name + ".GetFile(" + d + ") => " + d1);
        return new FileObject(d1);
    }
    this.deletefolder = function (d) {
        util_log(this._name + ".DeleteFolder(" + d + ")");
    }
    this.createfolder = function (f) {
        util_log(this._name + ".CreateFolder(" + f + ")");
        var abs = win32.isAbsolute(f);
        if (!abs)
            util_log("FIXME: " + this._name + ".CreateFolder(" + _truncateOutput(f) + ") - relative path");
        var parts = win32.normalize(f).split(win32.sep);
        var t = FS;
        for (let p of parts) {
            if (p === "")
                continue;
            if (p.toUpperCase() in t)
                t = t[p.toUpperCase()];
            else {
                t = t[p.toUpperCase()] = {};
            };
        }
        return new FolderObject(f);
    }
    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/getspecialfolder-method
    this.getspecialfolder = function (f) {
        switch ("" + f) {
            case "0":
                fn = ENV["WINDIR"]; //"WindowsFolder";
                break;
            case "1":
                fn = ENV["SYSTEMDIRECTORY"]; //"SystemFolder";
                break;
            case "2":
                fn = ENV["TEMP"]; //TempFolder;
                break;
            default:
                fn = "UnknownType[" + f + "]";
                break;
        }
        util_log(this._name + ".GetSpecialFolder(" + f + ") => " + fn + win32.sep);
        return fn + win32.sep;
    }
    this.gettempname = function () {
        var fn = "TempFile_" + _object_id++ + ".tmp";
        util_log(this._name + ".GetTempName() => " + fn);
        return fn;
    }
    this.getabsolutepathname = function (d) {
        d1 = win32.normalize(d);
        if (!win32.isAbsolute(d1)) {
            d1 = ENV["CWD"] + win32.sep + d1;
        }
        util_log(this._name + ".GetAbsolutePathName(" + d + ") => " + d1);
        return d1;
    }
});
FileSystemObject.toString = FileSystemObject.toJSON = () => {
    return "FileSystemObject"
}

// https://learn.microsoft.com/en-us/windows/win32/shell/folderitem
FolderItem = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "FolderItem[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "application");
    _defineSingleProperty(this, "getfolder");
    _defineSingleProperty(this, "getlink");
    _defineSingleProperty(this, "isbrowsable");
    _defineSingleProperty(this, "isfilesystem");
    _defineSingleProperty(this, "isfolder");
    _defineSingleProperty(this, "islink");
    _defineSingleProperty(this, "name", "_folder_name");
    _defineSingleProperty(this, "parent");
    _defineSingleProperty(this, "path");
    _defineSingleProperty(this, "size");
    _defineSingleProperty(this, "type");
    this.name = d;
    this.path = d;
    this.toString = () => {
        return this._name;
    }
});
FolderItem.toString = FolderItem.toJSON = () => {
    return "FolderItem";
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/folder-object
FolderObject = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "FolderObject[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "name", "_folder_name");
    _defineSingleProperty(this, "parentfolder");
    //_defineSingleProperty(this, "Files");
    //_defineSingleProperty(this, "SubFolders");
    _defineSingleProperty(this, "isrootfolder");
    _defineSingleProperty(this, "attributes");
    _defineSingleProperty(this, "datecreated");
    _defineSingleProperty(this, "datelastaccessed");
    _defineSingleProperty(this, "datelastmodified");
    _defineSingleProperty(this, "drive");
    _defineSingleProperty(this, "path");
    _defineSingleProperty(this, "shortname");
    _defineSingleProperty(this, "shortpath");
    this._shortpath = d;
    _defineSingleProperty(this, "size");
    _defineSingleProperty(this, "type");
    var a = win32.parse(d);

    this.name = d;
    this.parentfolder = win32.join(d, "..");
    Object.defineProperty(this, "files", {
        get: function () {
            var ret = [];
            var f = this.name;
            var abs = win32.isAbsolute(f);
            if (!abs)
                util_log("FIXME: " + this._name + ".Files.get() - relative path");
            var parts = win32.normalize(f).split(win32.sep);
            var t = FS;
            for (let p of parts) {
                if (p === "")
                    continue;
                t = t[p.toUpperCase()];
            }
            if (typeof t !== "undefined") {
                for (var p1 in t) {
                    ret[ret.length] = win32.join(this.Name, p1);
                }
            }
            util_log(this._name + ".Files.get() => (" + typeof ret + ") '" + _truncateOutput(ret) + "'");
            return ret;
        }
    });
    Object.defineProperty(this, "subfolders", {
        get: function () {
            var f = this.name;
            var ret = [];
            var abs = win32.isAbsolute(f);
            if (!abs)
                util_log("FIXME: " + this._name + ".Files.get() - relative path");
            var parts = win32.normalize(f).split(win32.sep);
            var t = FS;
            for (let p of parts) {
                if (p === "")
                    continue;
                t = t[p.toUpperCase()];
            }
            if (typeof t !== "undefined") {
                for (var p1 in t) {
                    ret[ret.length] = win32.join(this.name, p1);
                }
            }
            util_log(this._name + ".SubFolders.get() => (" + typeof ret + ") '" + _truncateOutput(ret) + "'");
            return ret;
        }
    });

    this.toString = function () {
        return this._name;
    }
});
FolderObject.toString = FolderObject.toJSON = () => {
    return "FolderObject"
}

// https://learn.microsoft.com/en-us/windows/win32/shell/folder2-object
Folder2 = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "Folder2[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "self", "_self");
    _defineSingleProperty(this, "offlinestatus");
    this.self = new FolderItem(d);
    this.toString = () => {
        return this._name;
    }
});
Folder2.toString = Folder2.toJSON = () => {
    return "Folder2";
}

// https://learn.microsoft.com/en-us/office/vba/Language/Reference/user-interface-help/getobject-function
GetObject = function (a, b) {
    util_log("GetObject(" + a + ", " + b + ")");
    return new AutomationObject(a, b);
}
GetObject.toString = GetObject.toJSON = () => {
    return "GetObject"
}

// https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms759148(v=vs.85)
MSXML2_XMLHTTP = _proxy(function () {
    this.id = _object_id++;
    this._name = "MSXML2.XMLHTTP[" + this.id + "]";
    util_log("new " + this._name);
    var self = this;
    this._status = 0;
    this._headers = {};
    this._wscript_urls_index = null;
    this.toString = this.tostring = () => {
        return this._name
    }

    _defineSingleProperty(this, "allresponseheaders");
    // Workaround for new this[ActiveXObject ... called from onreadystatechange callback (TODO)
    _defineSingleProperty(this, "activexobject");
    this._activexobject = ActiveXObject;

    this.open = function (m, u, a) {
        u = u.replace(/\r|\n/g, "");
        util_log(this._name + ".open(" + m + "," + u + "," + a + ")");
        this.method = m;
        this.url = u;
        switch (("" + a).toLowerCase()) {
            case "false":
            case "no":
            case "0":
            case "":
            case "undefined":
            case null:
                this.async = false;
                break;
            default:
                this.async = true;
        }
        function containsURL(obj, list) {
            for (url of list) {
                if (JSON.stringify(obj) === JSON.stringify(url)) {
                    return true;
                }
            }
            return false;
        }
        this._wscript_urls_index = _wscript_urls.length
        let url_to_add = { "url": u, "method": m }
        if (!containsURL(url_to_add, _wscript_urls)) {
            _wscript_urls[this._wscript_urls_index] = url_to_add;
        }
    }
    this.close = function () {
        util_log(this._name + ".close()");
    }
    this.getallresponseheaders = function () {
        var ret = this.allresponseheaders;
        util_log(this._name + ".getAllResponseHeaders() => " + _inspect(ret));
        return ret;
    }
    this.send = function (a) {
        util_log(this._name + ".send(" + a + ")");
        if (_download === "Yes") {
            try {
                var res = _sync_request(this.method, this.url, {
                    'headers': this._headers
                });
                //util_log("Sync_req: " + _truncateOutput(res.getBody()));
                this.status = res.statusCode || 0;
                this.readystate = 4;
                this.statustext = "OK";
                this.responsebody = res.body || "";
                this.allresponseheaders = JSON.stringify(res.headers) || "";
            } catch (err) {
                util_log(this._name + ".send() Exception: " + _truncateOutput(_inspect(err)));
                this.status = err.statusCode || 0;
                this.readystate = 4;
                this.statustext = err.toString();
                this.responsebody = err.body || "";
                this.allresponseheaders = JSON.stringify(err.headers) || "";
            }
            if (this._wscript_urls_index != null) {
                _wscript_urls[this._wscript_urls_index]["status"] = this.status;
                _wscript_urls[this._wscript_urls_index]["response_headers"] = this.allresponseheaders;
                _wscript_urls[this._wscript_urls_index]["response_body"] = _truncateOutput(this.responsebody);
                _wscript_urls[this._wscript_urls_index]["request_body"] = a;
                _wscript_urls[this._wscript_urls_index]["statustext"] = this.statustext;
            }
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                this.onreadystatechange();
            }
            return;
        } else if (_download === "No") {
            util_log(this._name + " Not sending data, if you want to interact with remote server, set --down");
            var s = 'MZ'
            for (var ii = 0; ii < 200; ii++) {
                s += 'Dummy content, use --down to download the real payload.\n';
            }
            this.responsebody = s;
            this.status = 200;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange() with dummy data");
                this.onreadystatechange();
            }
        } else if (_download === "Return HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange()");
                this.onreadystatechange();
            }
        } else if (_download === "Throw HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404 & throwing exception");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange()");
                this.onreadystatechange();
            }
            throw new Error("MSXML2_XMLHTTP.send intentionally throwing exception");
        } else {
            util_log(">>> FIXME: MSXML2_XMLHTTP.send _download '" + _download + "' not handled");
            throw new TypeError(">>> FIXME: MSXML2_XMLHTTP.send _download '" + _download + "' not handled");
        }
        util_log(this._name + ".send(" + a + ") finished");
    }
    this.setrequestheader = function (a, b) {
        util_log(this._name + ".setRequestHeader(" + a + ", " + b + ")");
        this._headers[a] = b;
        if (this._wscript_urls_index != null) {
            _wscript_urls[this._wscript_urls_index]["request_headers"] = b;
        }
    }
    this.setoption = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".setOption(" + a + ")");
    }
    this.settimeouts = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments,
            0).join(","));
        util_log(this._name + ".setTimeouts(" + a + ")");
    }
    this._responseBody = [];
    _defineSingleProperty(this, "responsebody", "_responseBody");
    _defineSingleProperty(this, "url");
    _defineSingleProperty(this, "method");
    _defineSingleProperty(this, "status", "_status");
    _defineSingleProperty(this, "async");
    _defineSingleProperty(this, "readystate");
    _defineSingleProperty(this, "statustext");
    _defineSingleProperty(this, "onreadystatechange");
    this.onreadystatechange = undefined;
    Object.defineProperty(this, "responsetext", {
        get: function () {
            var ret = "" + this._responseBody;
            util_log(this._name + ".ResponseText.get() => (" + typeof ret + ") '" + _truncateOutput(ret) + "'");
            return ret;
        },
        set: function (v) {
            util_log(this._name + ".ResponseText = (" + typeof v + ") '" + _truncateOutput(v) + "'");
            this.responseBody = v;
        }
    });
});
MSXML2_XMLHTTP.toString = MSXML2_XMLHTTP.toJSON = () => {
    return "MSXML2_XMLHTTP"
}

// https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms756987(v=vs.85)
Msxml2_DOMDocument_6_0 = _proxy(function () {
    this.id = _object_id++;
    this._name = "Msxml2.DOMDocument.6.0[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms757047(v=vs.85)
    this.createelement = function (a) {
        util_log(this._name + ".createElement(" + a + ")");
        return new Element(a);
    }
});
Msxml2_DOMDocument_6_0.toString = Msxml2_DOMDocument_6_0.toJSON = () => {
    return "Msxml2_DOMDocument_6_0"
}

// https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-process
Process = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "Process[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "processid");
    _defineSingleProperty(this, "exitcode");
    _defineSingleProperty(this, "status");
    _defineSingleProperty(this, "stdout");
    _defineSingleProperty(this, "stdin");
    _defineSingleProperty(this, "stderr");
    _defineSingleProperty(this, "name", "_processname");
    _defineSingleProperty(this, "commandline");
    this.processid = this.id;
    this.name = d;
    this.commandline = d;
    this.stdout = new TextStream();
    this.stderr = new TextStream();
    this.stdin = new TextStream();
    this.terminate = function () {
        var a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".Terminate(" + a + ")");
    }
    this.getowner = function () {
        var a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".GetOwner(" + a + ")");
    }
    this.toString = () => {
        return this._name;
    }
});
Process.toString = Process.toJSON = () => {
    return "Process";
}

// https://learn.microsoft.com/en-ca/office/vba/language/reference/user-interface-help/dictionary-object
Scripting_Dictionary = _proxy(function () {
    this.id = _object_id++;
    this._name = "Scripting.Dictionary[" + this.id + "]";
    util_log("new " + this._name);
    this._dict = {};
    this.add = function (a, b) {
        util_log(this._name + ".add(" + a + ", " + b + ")");
        this._dict[a] = b;
    }
    this.item = function (a) {
        if (!a)
            a = 0;
        util_log(this._name + ".Item(" + a + ")");
        return this._dict[a];
    }
    this.items = function () {
        util_log(this._name + ".Item()");
        return this._dict;
    }
    this.exists = function (a) {
        var ret;
        ret = (a in this._dict);
        util_log(this._name + ".Exists(" + a + ") => " + ret);
        return ret;
    }
});
Scripting_Dictionary.toString = Scripting_Dictionary.toJSON = () => {
    return "Scripting_Dictionary"
}

// https://ss64.com/vb/shell.html
Shell_Application = _proxy(function () {
    this.id = _object_id++;
    this._name = "Shell.Application[" + this.id + "]";
    util_log("new " + this._name);
    this.toString = function () {
        return this._name;
    }
    var nms = {
        0: "C:\\Users\\User\\Desktop",
        1: "::{871C5380-42A0-1069-A2EA-08002B30309D}",
        2: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs",
        3: "::{26EE0668-A00A-44D7-9371-BEB064C98683}\\0",
        4: "::{21EC2020-3AEA-1069-A2DD-08002B30309D}\\::{2227A280-3AEA-1069-A2DE-08002B30309D}",
        5: "C:\\Users\\User\\Documents",
        6: "C:\\Users\\User\\Favorites",
        7: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup",
        8: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Recent",
        9: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\SendTo",
        10: "::{645FF040-5081-101B-9F08-00AA002F954E}",
        11: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu",
        13: "C:\\Users\\User\\Music",
        14: "C:\\Users\\User\\Videos",
        16: "C:\\Users\\User\\Desktop",
        17: "::{20D04FE0-3AEA-1069-A2D8-08002B30309D}",
        18: "::{F02C1A0D-BE21-4350-88B0-7367FC96EF3C}",
        19: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Network Shortcuts",
        20: "C:\\Windows\\Fonts",
        21: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Templates",
        22: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu",
        23: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs",
        24: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp",
        25: "C:\\Users\\Public\\Desktop",
        26: "C:\\Users\\User\\AppData\\Roaming",
        27: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Printer Shortcuts",
        28: "C:\\Users\\User\\AppData\\Local",
        29: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup",
        30: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp",
        31: "C:\\Users\\User\\Favorites",
        32: "C:\\Users\\User\\AppData\\Local\\Microsoft\\Windows\\INetCache",
        33: "C:\\Users\\User\\AppData\\Local\\Microsoft\\Windows\\INetCookies",
        34: "C:\\Users\\User\\AppData\\Local\\Microsoft\\Windows\\History",
        35: "C:\\ProgramData",
        36: "C:\\Windows",
        37: "C:\\Windows\\System32",
        38: "C:\\Program Files",
        39: "C:\\Users\\User\\Pictures",
        40: "C:\\Users\\User",
        41: "C:\\Windows\\SysWOW64",
        42: "C:\\Program Files (x86)",
        43: "C:\\Program Files\\Common Files",
        44: "C:\\Program Files (x86)\\Common Files",
        45: "C:\\ProgramData\\Microsoft\\Windows\\Templates",
        46: "C:\\Users\\Public\\Documents",
        47: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Administrative Tools",
        48: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Administrative Tools",
        49: "::{21EC2020-3AEA-1069-A2DD-08002B30309D}\\::{7007ACC7-3202-11D1-AAD2-00805FC1270E}",
        53: "C:\\Users\\Public\\Music",
        54: "C:\\Users\\Public\\Pictures",
        55: "C:\\Users\\Public\\Videos",
        56: "C:\\Windows\\Resources",
        58: "C:\\ProgramData\\OEM Links",
        59: "C:\\Users\\User\\AppData\\Local\\Microsoft\\Windows\\Burn\\Burn",
        61: "::{F02C1A0D-BE21-4350-88B0-7367FC96EF3C}"

    }
    this.namespace = function (a) {
        var ret;
        if (typeof a === "string") {
            ret = new Folder2(a);
        } else {
            if (a in nms) {
                ret = new Folder2(nms[a]);
            } else {
                ret = null
            }
        }
        util_log(this._name + ".Namespace(" + a + ") => " + ret);
        return ret;
    }
    this.shellexecute = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".ShellExecute(" + a + ")");
    }
});
Shell_Application.toString = Shell_Application.toJSON = () => {
    return "Shell_Application"
}

// https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/textstream-object
TextStream = _proxy(function (filename) {
    this.id = _object_id++;
    this._name = "TextStream[" + this.id + "]";
    this._filename = filename;
    this._content = "";
    this.writeline = function (s) {
        util_log(this._name + ".WriteLine(" + _truncateOutput(s) + ")");
        this._content += s + '\r\n';
        _wscript_saved_files[this._filename] = this._content;
        fs.writeFile(filename=this._filename, data=this._content, function (err) {
            if (err) return util_log(err)
        });
    }
    this.write = function (s) {
        util_log(this._name + ".Write(" + s + ")");
        this._content += s;
        _wscript_saved_files[this._filename] = this._content;
    }
    this.readall = function () {
        util_log(this._name + ".ReadAll()");
        return "readall";
    }
    this.close = function () {
        util_log(this._name + ".Close()");
    }
    this.readline = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".ReadLine(" + a + ")");
        return "MZreadline";
    }
    this.toString = function () {
        return this._name;
    }
    this.toJSON = function () {
        return this.toString();
    }
    this.inspect = function () {
        return this.toString();
    }
});
TextStream.toString = TextStream.toJSON = () => {
    return "TextStream"
}

// ?
MSScriptControl_ScriptControl = function () {
    this.id = _object_id++;
    this._name = "MSScriptControl.ScriptControl[" + this.id + "]";
    util_log("new " + this._name);
    _defineSingleProperty(this, "Language");
    _defineSingleProperty(this, "Timeout");
    this.addcode = function (a) {
        util_log(this._name + ".AddCode(" + a + ")");
    }
    this.addobject = function (a, b) {
        util_log(this._name + ".AddObject(" + a + ", " + b + ")");
    }
}
MSScriptControl_ScriptControl.toString = MSScriptControl_ScriptControl.toJSON = () => {
    return "MSScriptControl_ScriptControl"
}

// WScript

// https://admhelp.microfocus.com/uft/en/all/VBScript/Content/html/ff1bb4e8-9970-48e6-91d3-0bf0da59d835.htm

// https://learn.microsoft.com/en-us/previous-versions/ss1ysb2a(v=vs.85)
// WshArguments must be declared before WScript because WScript.arguments = WshArguments()
WshArguments = _proxy(function (init = undefined) {
    this.id = _object_id++;
    this._name = "WshArguments[" + this.id + "]";
    if (!init)
        this._args = _proxy([]);
    else
        this._args = _proxy(init);
    this.add = function (a) {
        util_log(this._name + ".add(" + a + ")");
        this._args[this._args.length] = a;
    }
    this.item = function (a) {
        if (!a)
            a = 0;
        util_log(this._name + ".Item(" + a + ")");
        return this._args[a];
    }
    this.items = function () {
        util_log(this._name + ".Items()");
        return this._args;
    }
    this.length = function () {
        util_log(this._name + ".Length()");
        return this._args.length;
    }
    this.toString = function () {
        return this._name;
    }
    this.named = new WshNamed(this._args);
    Object.defineProperty(this, "args", {
        get: function () {
            util_log(this._name + "." + name + ".get() => (" + typeof this._args + ") '" + _truncateOutput(this._args) + "'");
            return this[intvar];
        },
        set: function (v) {
            util_log(this._name + "." + name + " = (" + typeof v + ") '" + _truncateOutput(v) + "'");
            this._args = _proxy(v);
        }
    })
});
WshArguments.toString = WshArguments.toJSON = () => {
    return "WshArguments"
}

// https://learn.microsoft.com/en-us/previous-versions/d6y04sbb(v=vs.85)
// WshNamed must be declared before WScript because WScript.named = WshNamed()
WshNamed = _proxy(function (init = undefined) {
    this.id = _object_id++;
    this._name = "WshNamed[" + this.id + "]";
    if (!init)
        this._args = _proxy([]);
    else
        this._args = _proxy(init);
    // Fake to imply elevated permissions
    this._args["elevated"] = true;
    this.Exists = function (a) {
        if (!a)
            a = 0;
        util_log(this._name + ".Exists(" + a + ")");
        return this._args[a];
    };
});
WshNamed.toString = WshNamed.toJSON = () => {
    return "WshNamed"
}

// https://learn.microsoft.com/en-us/previous-versions/at5ydy31(v=vs.85)
WScript = _proxy(new function () {
    this._name = "WScript";
    this.createobject = function (a) {
        util_log(this._name + ".CreateObject(" + a + ")");
        return create_object(a);
    };
    this.sleep = function (a) {
        // This is our attempt at sleep-skipping
        util_log(this._name + ".Sleep(" + a + ")");
    };
    this.echo = function (a) {
        util_log(this._name + ".Echo(" + a + ")");
    };
    this.quit = function (a) {
        util_log(this._name + ".Quit(" + a + ")");
        throw {
            _source: "WScript.Quit"
        }
    };
    this.toString = function () {
        return "Windows Script Host";
    };
    this.toJSON = function () {
        return this.toString();
    }
    _defineSingleProperty(this, "scriptname");
    this._scriptname = "ScriptName.js";
    _defineSingleProperty(this, "scriptfullname");
    this.scriptFullName = "C:\\Users\\User\\AppData\\Local\\Temp\\" + this._scriptname;
    _defineSingleProperty(this, "version");
    this.version = "5.812";
    _defineSingleProperty(this, "arguments");
    this.arguments = new WshArguments();
    _defineSingleProperty(this, "path");
    this._path = ENV["SYSTEMDIRECTORY"];
    _defineSingleProperty(this, "name", "_wsh_name");
    this._wsh_name = "Windows Script Host";
    _defineSingleProperty(this, "interactive");
    this._interactive = true;
    _defineSingleProperty(this, "stderr");
    this._stderr = new TextStream();
    _defineSingleProperty(this, "stdin");
    this._stderr = new TextStream();
    _defineSingleProperty(this, "stdout");
    this._stderr = new TextStream();
});
WScript.toString = WScript.toJSON = () => {
    return "WScript"
}
WSH = WScript;

// https://learn.microsoft.com/en-us/previous-versions//6s7w15a0(v=vs.85)
WshEnvironment = _proxy(function (strType) {
    this._id = _object_id++;
    this._strType = strType.toUpperCase();
    this._name = "WshEnvironment[" + this._id + "](" + this._strType + ")";
    util_log("new " + this._name);
    for (const [key, value] of Object.entries(ENV)) {
        try {
            _defineSingleProperty(this, key);
            this.key = value;
        } catch {}
      }

    return this;
});
WshEnvironment.toString = WshEnvironment.toJSON = () => {
    return "WshEnvironment"
}

// https://ss64.com/vb/network.html
WScript_Network = _proxy(function () {
    this.id = _object_id++;
    this._name = "WScript.Network[" + this.id + "]";
    util_log("new " + this._name);
    this.toString = this.tostring = function () {
        return this._name;
    }
    _defineSingleProperty(this, "userdomain");
    this.userdomain = "MYDOM";
});
WScript_Network.toString = WScript_Network.toJSON = () => {
    return "WScript_Network"
}

// https://learn.microsoft.com/en-us/previous-versions//5ahda31z(v=vs.85)
WScript_Shell = _proxy(function () {
    this.id = _object_id++;
    this._name = "WScript.Shell[" + this.id + "]";
    util_log("new " + this._name);
    this.expandenvironmentstrings = function (a) {
        var ret = a;
        var regex;
        for (var key in ENV) {
            if (ENV.hasOwnProperty(key)) {
                regex = new RegExp("%" + key + "%", "ig");
                ret = ret.replace(regex, ENV[key]);
            }
        }
        util_log(this._name + ".ExpandEnvironmentStrings(" + a + ") => " + ret);
        return ret;
    };
    this.run = function (a, b, c) {
        util_log(this._name + ".Run(" + a + ", " + b + ", " + c + ")");
    }
    this.exec = function (a) {
        util_log(this._name + ".Exec(" + a + ")");
        // Prepend with a useful header to assist with batch identification
        a = "REM Batch extracted by Assemblyline\n" + a;
        _wscript_saved_files[this._name] = a;
        return new Process(a);
    }
    this.regwrite = function (a, b, c) {
        util_log(this._name + ".RegWrite(" + a + ", " + b + ", " + c + ")");
        REG[_reg_normalize(a)] = b;
    }
    this.regread = function (a) {
        var normalized_registry_key = _reg_normalize(a);
        // Remove trailing backwards slashes if they exist
        normalized_registry_key = normalized_registry_key.replace(/\\+$/, "");
        var ret = "" + REG[_reg_normalize(normalized_registry_key)];
        if (ret === "undefined") {
            util_log("FIXME: " + this._name + ".RegRead(" + a + ") - unknown key");
        }
        util_log(this._name + ".RegRead(" + a + ") => " + ret);
        return ret;
    }
    // https://learn.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)
    this.environment = function (a) {
        var ret = WshEnvironment(a);
        util_log(this._name + ".Environment(" + a + ")");
        return ret;
    }
    this.specialfolders = function (a) {
        util_log("WScript.SpecialFolders(" + a + ")");
        return a + "/";
    }
    this.createshortcut = function (a) {
        a = _truncateOutput(a);
        util_log("WScript.CreateShortcut(" + a + ")");
        return new WshShortcut(a);
    }
    this.popup = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log("WScript.Popup(" + a + ")");
        return 1;
        // -1 The user did not click a button before nSecondsToWait seconds elapsed.
        // 1 OK button
        // 2 Cancel button
        // 3 Abort button
        // 4 Retry button
        // 5 Ignore button
        // 6 Yes button
        // 7 No button
        // 10 Try Again button
        // 11 Continue button
    }
    this.toString = this.tostring = function () {
        return this._name;
    }
});
WScript_Shell.toString = WScript_Shell.toJSON = () => {
    return "WScript_Shell"
}
Shell = WScript_Shell;
WshShell = WScript_Shell;

// https://admhelp.microfocus.com/uft/en/all/VBScript/Content/html/5ce04e4b-871a-4378-a192-caa644bd9c55.htm
WshShortcut = _proxy(function (a) {
    this.id = _object_id++;
    this._link = a;
    this._name = "WshShortcut[" + this.id + "](" + this._link + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "arguments");
    _defineSingleProperty(this, "fullname", "_link");
    _defineSingleProperty(this, "targetpath");
    _defineSingleProperty(this, "windowstyle");
    _defineSingleProperty(this, "hotkey");
    _defineSingleProperty(this, "iconlocation");
    _defineSingleProperty(this, "description");
    _defineSingleProperty(this, "workingdirectory");
    this.save = function () {
        util_log(this._name + ".save()");
    }
    //this[Symbol.unscopables] = _proxy({})
});
WshShortcut.toString = WshShortcut.toJSON = () => {
    return "WshShortcut"
}

// VBScript

// https://www.tutorialspoint.com/vbscript/vbscript_reg_expressions.htm
VBScript_RegExp = _proxy(function () {
    this.id = _object_id++;
    this._name = "VBScript.RegExp[" + this.id + "]";
    util_log("new " + this._name);
    this.toString = this.tostring = function () {
        return this._name;
    }
});
VBScript_RegExp.toString = VBScript_RegExp.toJSON = () => {
    return "VBScript_RegExp"
}

// Exposed objects from SQL

// https://learn.microsoft.com/en-us/office/client-developer/access/desktop-database-reference/field-object-ado
ADODB_Field = _proxy(function (father) {
    this.id = _object_id++;
    this._name = "ADODB.Field[" + this.id + "]";
    this._father = father;
    util_log("new " + this._name);
    this.toString = this.tostring = () => {
        return this._name
    }
    _defineSingleProperty(this, "name", "_fieldname");
    _defineSingleProperty(this, "value");
    _defineSingleProperty(this, "definedsize");
    this._value = "";
    this.appendchunk = function () {
        let fds = Array.prototype.slice.call(arguments, 0);
        let a = _truncateOutput(fds.join(","));
        util_log(this._name + ".AppendChunk(" + a + ")");
        this._value = fds[0]
    }
    this.toString = function () {
        return this._name;
    }
});
ADODB_Field.toString = ADODB_Field.toJSON = () => {
    return "ADODB_Field"
}

// https://learn.microsoft.com/en-us/sql/ado/reference/ado-api/fields-collection-ado?source=recommendations&view=sql-server-ver16
ADODB_Fields = _proxy(function (father) {
    this.id = _object_id++;
    this._name = "ADODB.Fields[" + this.id + "]";
    this._father = father;
    util_log("new " + this._name);
    this.toString = this.tostring = () => {
        return this._name
    }
    _defineSingleProperty(this, "item");
    _defineSingleProperty(this, "count");
    this._items = [];
    this._count = 0;
    this._item = function (i) {
        return this._items[i];
    }
    this.resync = function () {
        let a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".Resync(" + a + ")");
    }
    this.append = function () {
        let fds = Array.prototype.slice.call(arguments, 0);
        let a = _truncateOutput(fds.join(","));
        util_log(this._name + ".Append(" + a + ")");
        var newfield = new ADODB_Field(this);
        if (fds.length > 0) {
            _defineSingleProperty(this._father, fds[0]);
            newfield.name = fds[0]
        }
        if (fds.length > 1)
            newfield.type = fds[1]
        if (fds.length > 2)
            newfield.definedsize = fds[2]
        this._father[fds[0]] = newfield;
        this._items[this._items.length] = newfield;
    }
    this.toString = function () {
        return this._name;
    }
});
ADODB_Fields.toString = ADODB_Fields.toJSON = () => {
    return "ADODB_Fields"
}

// https://learn.microsoft.com/en-us/office/vba/access/concepts/miscellaneous/recordset-ado-for-visual-c-plus-plus-syntax?source=recommendations
ADODB_Recordset = _proxy(function () {
    this.id = _object_id++;
    this._name = "ADODB.Recordset[" + this.id + "]";
    var father = this;
    util_log("new " + this._name);
    this.toString = this.tostring = () => {
        return this._name
    }
    this.close = function () {
        util_log(this._name + ".Close()");
    }
    this.open = function () {
        let a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".Open(" + a + ")");
    }
    this.addnew = function () {
        let a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".AddNew(" + a + ")");
        return {};
    }
    this.update = function () {
        let a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".Update(" + a + ")");
        return {};
    }
    _defineSingleProperty(this, "fields");
    _defineSingleProperty(this, "properties");
    this._properties = new Collection();
    this.fields = new ADODB_Fields(this);
});
ADODB_Recordset.toString = ADODB_Recordset.toJSON = () => {
    return "ADODB_Recordset"
}

// https://learn.microsoft.com/en-us/office/client-developer/access/desktop-database-reference/stream-object-ado-reference
ADODB_Stream = _proxy(function () {
    this.id = _object_id++;
    this._name = "ADODB.Stream[" + this.id + "]";
    util_log("new " + this._name);

    this.open = function () {
        util_log(this._name + ".Open()");
    }
    this._type = 2;
    this._position = 0;
    this._size = 0;
    this._content = '';
    this._charset = undefined;
    this.tostring = this.toString = () => {
        return this._name /*JSON.stringify(this)*/
    }

    this.write = function (a) {
        this.content = a;
        if (typeof a === 'undefined')
            util_log(this._name + ".Write(undefined) - Error ?");
        else {
            util_log(this._name + ".Write(str) - " + a.length + " bytes");
            this.size = a.length
        }
    }
    this.writetext = function (a) {
        var encoding = 'binary'
        if (typeof a === 'undefined')
            util_log(this._name + ".WriteText(undefined) - Error ?");
        else {
            if (this.type == 2 && typeof this.charset !== 'undefined') {
                this.content = _iconv.encode(a, this.charset);
                encoding = this.charset;
            } else {
                this.content = a;
            }
            util_log(this._name + ".WriteText(str) - " + a.length + " bytes, encoding: " + encoding);
            this.size = this.content.length
        }
    }
    this.savetofile = function (a, b) {
        util_log(this._name + ".SaveToFile(" + a + ", " + b + ")");
        _wscript_saved_files[a] = this.content;
    }
    this.saveToFile = this.savetofile;

    this.loadfromfile = function (a) {
        var encoding = 'binary';
        //util_log(this._name + ".LoadFromFile(" + a + ")");
        if (this.type == 2 && typeof this.charset !== 'undefined') {
            this.content = _iconv.decode(Buffer.from(_wscript_saved_files[a]), this.charset);
            encoding = this.charset;
        } else {
            this.content = _wscript_saved_files[a];
        }
        util_log(this._name + ".LoadFromFile(" + a + ") " + this.content.length + " bytes, encoding: " + encoding);
        this.Position = 0;
    }
    // adReadAll -1 Default. Reads all bytes from the stream, from the current position onwards to the EOS marker.
    // This is the only valid StreamReadEnum value with binary streams (Type is adTypeBinary).
    // adReadLine -2 Reads the next line from the stream (designated by the LineSeparator property).
    this.readtext = function (a) {
        util_log(this._name + ".ReadText(" + a + ")");
        if (typeof a === "undefined" || a == adReadAll) {
            return this.content;
        } else if (a == adReadLine) {
            throw new Error("FIXME: " + this._name + ".ReadText(" + a + ") not implemented.");
        } else if (a > 0) {
            return this.content.slice(this.Position, this.Position + a);
        } else {
            return this.content;
        }
    }
    this.read = function (a) {
        util_log(this._name + ".Read(" + a + ")");
        if (typeof a === "undefined" || a == adReadAll) {
            return this.content;
        } else if (a == adReadLine) {
            throw new Error("FIXME: " + this._name + ".Read(" + a + ") not implemented.");
        } else if (a > 0) {
            return this.content.slice(this.Position, this.Position + a);
        } else {
            return this.content;
        }
    }
    this.close = function () {
        util_log(this._name + ".Close()");
    }
    this.copyto = function (t) {
        util_log(this._name + ".CopyTo(" + t + ")");
        t._type = this._type;
        t._position = this._position;
        t._size = this._size;
        t._content = this._content;
        t._charset = this._charset;
    }
    _defineSingleProperty(this, "charset", "_charset");
    //_defineSingleProperty(this, "readtext", "_content");
    //_defineSingleProperty(this, "read", "_content");
    _defineSingleProperty(this, "content", "_content");
    // adTypeBinary 1 Indicates binary data.
    // adTypeText 2 Default. Indicates text data, which is in the character set specified by Charset.
    _defineSingleProperty(this, "type", "_type");
    _defineSingleProperty(this, "position", "_position");
    _defineSingleProperty(this, "size", "_size");
});
ADODB_Stream.toString = ADODB_Stream.toJSON = () => {
    return "ADODB_Stream"
}
//ADODB_Stream.prototype = Object.create(Object.prototype);
//ADODB_Stream.prototype.constructor = ADODB_Stream;

// .NET Objects

// https://learn.microsoft.com/en-us/dotnet/api/system.activator?view=net-7.0
Activator = _proxy(function () {
    this.id = _object_id++;
    this._name = "Activator[" + this.id + "]()";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.activator.createinstance?view=net-7.0
    this.CreateInstance = function (assemblyName, typeName, ignoreCase, bindingAttr) {
        util_log(this._name + ".CreateInstance(" + _truncateOutput(assemblyName) + ")");
        if (assemblyName.toLowerCase() === "program"){
            return new WorkProgram();
        }
    }
});
Activator.toString = Activator.toJSON = () => {
    return "Activator"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.delegate?view=net-7.0
Delegate = _proxy(function (target, method) {
    this.id = _object_id++;
    this._name = "Delegate[" + this.id + "](" + target + ", " + method + ")";
    this._target = target;
    this._method = method;
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.delegate.dynamicinvoke?view=net-7.0
    this.DynamicInvoke = function (args) {
        util_log(this._name + ".DynamicInvoke(" + _truncateOutput(args) + ")");
        // Might as well try to save this array as a blob
        if (typeof args === "object" && args[0] !== undefined) {
            let blob_content = new Uint8Array(args);
            let blob = new Blob([blob_content]);
        }
        return new Activator();
    }
    // This is assumed to be the target buffer
    Object.defineProperty(this, "0", {
        get: function () {
            util_log(this._name + "[0]");
            return this._target._buffer;
        }
    });
});
Delegate.toString = Delegate.toJSON = () => {
    return "Delegate"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=net-7.0
System_Collections_ArrayList = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.Collections.ArrayList[" + this.id + "]";
    this._list = [];
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist.add?view=net-7.0
    this.Add = function (value) {
        util_log(this._name + ".Add(" + _truncateOutput(value) + ") of type '" + typeof value + "'");
        if (typeof value === "object") {
            this._list.push(...value);
        } else {
            this._list.push(value);
        }
    }
    // https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist.toarray?view=net-7.0
    this.ToArray = function () {
        return this._list;
    }
});
System_Collections_ArrayList.toString = System_Collections_ArrayList.toJSON = () => {
    return "System_Collections_ArrayList"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.io.memorystream?view=net-7.0
System_IO_MemoryStream = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.IO.MemoryStream[" + this.id + "]";
    this._buffer = null;

    // https://learn.microsoft.com/en-us/dotnet/api/system.io.memorystream.position?view=net-7.0
    this.Position = 0;

    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.io.memorystream.write?view=net-7.0
    this.write = function (buffer, offset, count) {
        util_log(this._name + ".write(" + _truncateOutput(buffer) + ", " + offset + ", " + count + ")");
        this._buffer = buffer;
    }
    // https://learn.microsoft.com/en-us/dotnet/api/system.io.memorystream.writebyte?view=net-7.0
    this.writebyte = function (value) {
        if (this._buffer === null) {
            util_log(this._name + ".WriteByte()");
            this._buffer = []
        }
        this._buffer.push(value);
        this.Position += 1;
    }
});
System_IO_MemoryStream.toString = System_IO_MemoryStream.toJSON = () => {
    return "System_IO_MemoryStream"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter?view=net-7.0
System_Runtime_Serialization_Formatters_Binary_Binaryformatter = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.Runtime.Serialization.Formatters.Binary.Binaryformatter[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter.deserialize?view=net-7.0
    this.Deserialize_2 = function (stream) {
        util_log(this._name + ".Deserialize_2(" + stream._name + ")");
        return new Delegate(stream);
    }
});
System_Runtime_Serialization_Formatters_Binary_Binaryformatter.toString = System_Runtime_Serialization_Formatters_Binary_Binaryformatter.toJSON = () => {
    return "System_Runtime_Serialization_Formatters_Binary_Binaryformatter"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.frombase64transform?view=net-7.0
System_Security_Cryptography_FromBase64Transform = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.Security.Cryptography.FromBase64Transform[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.frombase64transform.transformfinalblock?view=net-7.0
    this.TransformFinalBlock = function (inputBuffer, inputOffset, inputCount) {
        let byte_str = new Buffer.from(inputBuffer).toString('ascii');
        let transformed_str = Buffer.from(byte_str, "base64");

        // We want this extracted
        _wscript_saved_files[this._name] = transformed_str;

        let transformed_bytes = Array.from(Buffer.from(transformed_str, 'ascii'));
        util_log(this._name + ".TransformFinalBlock(" + _truncateOutput(inputBuffer) + ", " + inputOffset + ", " + inputCount + ") => " + _truncateOutput(transformed_bytes));
        return transformed_bytes
    }
});
System_Security_Cryptography_FromBase64Transform.toString = System_Security_Cryptography_FromBase64Transform.toJSON = () => {
    return "System_Security_Cryptography_FromBase64Transform"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.text.asciiencoding?view=net-7.0
System_Text_ASCIIEncoding = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.Text.ASCIIEncoding[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.text.asciiencoding.getbytecount?view=net-7.0
    this.GetByteCount_2 = function (chars, index, count) {
        let byte_count = Array.from(Buffer.from(chars, 'ascii')).length
        util_log(this._name + ".GetByteCount_2(" + _truncateOutput(chars) + ") => " + byte_count + " bytes");
        return byte_count;
    }
    // https://learn.microsoft.com/en-us/dotnet/api/system.text.asciiencoding.getbytes?view=net-7.0
    this.GetBytes_4 = function (chars, bytes) {
        let chars_as_bytes = Array.from(Buffer.from(chars, 'ascii'));
        util_log(this._name + ".GetBytes_4(" + _truncateOutput(chars) + ") => " + _truncateOutput(chars_as_bytes));
        return chars_as_bytes;
    }
});
System_Text_ASCIIEncoding.toString = System_Text_ASCIIEncoding.toJSON = () => {
    return "System_Text_ASCIIEncoding"
}

// This is a placeholder method until we can determine what this is actually a reference to
WorkProgram = _proxy(function () {
    this.id = _object_id++;
    this._name = "WorkProgram[" + this.id + "]()";
    util_log("new " + this._name);
    this.Work = function (url) {
        if (this._name === undefined) {
            util_log("WorkProgram => Work(" + url + ")");
        } else {
            util_log(this._name + " => Work(" + url + ")");
        }
        var ret = new XMLHttpRequest();
        ret.open("get", url);
        ret.send();
    }
});
WorkProgram.toString = WorkProgram.toJSON = () => {
    return "WorkProgram"
}

// Internet-Explorer API

// https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752049(v=vs.85)
InternetExplorer_Application = _proxy(function () {
    this.id = _object_id++;
    this._name = "InternetExplorer.Application[" + this.id + "]";
    this.document = document;
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752093(v=vs.85)
    this.Navigate = function (url, Flags, TargetFrameName) {
        util_log(this._name + ".Navigate(" + url + ")");
        var ret = new XMLHttpRequest();
        ret.open("get", url);
        ret.send();
        this.Busy = false;
        this.readystate = 4;
        return "S_OK"
    }
});
InternetExplorer_Application.toString = InternetExplorer_Application.toJSON = () => {
    return "InternetExplorer_Application"
}

// MSI Installer

// https://learn.microsoft.com/en-us/windows/win32/msi/installer-object
WindowsInstaller_Installer = _proxy(function () {
    this.id = _object_id++;
    this._name = "WindowsInstaller.Installer[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/windows/win32/msi/installer-installproduct
    this.InstallProduct = function (packagePath, propertyValues) {
        util_log(this._name + ".InstallProduct(" + packagePath + ", " + propertyValues + ")");
        var ret = new XMLHttpRequest();
        ret.open("get", packagePath);
        ret.send();
    }
});
WindowsInstaller_Installer.toString = WindowsInstaller_Installer.toJSON = () => {
    return "WindowsInstaller_Installer"
}

// Class representations of certain Element types

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a
Anchor = _proxy(function (n = "a") {
    Element.call(this, n);
    this._id = _object_id++;
    this._name = "Anchor[" + this._id + "]";
    this.elementName = "a";
    this._attributes = {};
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
    this._download = undefined;
    Object.defineProperty(this, "download", {
        get: function () {
            util_log(this._name + ".download() => " + this._attributes["download"]);
            return this._attributes["download"]
        },
        set: function (value, filename) {
            util_log(this._name + ".download = " + value + " with filename = " + filename);
            this._attributes["download"] = value
        }
    });

    _defineSingleProperty(this, "href");
    _defineSingleProperty(this, "hreflang");
    _defineSingleProperty(this, "ping");
    _defineSingleProperty(this, "referrerpolicy");
    _defineSingleProperty(this, "rel");
    _defineSingleProperty(this, "target");
    _defineSingleProperty(this, "type");

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#deprecated_attributes

    _defineSingleProperty(this, "charset");
    _defineSingleProperty(this, "coords");

    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "name");

    _defineSingleProperty(this, "rev");
    _defineSingleProperty(this, "shape");

    // Unknown properties
    _defineSingleProperty(this, "title");
});
Anchor.prototype = Object.create(Element.prototype);
Anchor.prototype.constructor = Anchor;
Anchor.toString = Anchor.toJSON = () => {
    return "Anchor"
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button
Button = _proxy(function (n = "button") {
    Element.call(this, n);
    this._id = _object_id++;
    this._name = "Button[" + this._id + "]";
    this.elementName = "button";
    this._attributes = {};
    util_log("new " + this._name + "()");
    this.on = function (action, fn) {
        if (fn.constructor.name === "Function") {
            var function_name = fn.prototype.name;
            if (function_name === undefined) {
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                function_name = "anonymous";
            }
            util_log(this._name + "." + action + "(" + function_name + ")")
            util_log("Running function " + function_name + "()");
            fn();
        }
        else {
            util_log("That's weird, a non-function was passed to button.on...")
        }
    }
});
Button.prototype = Object.create(Element.prototype);
Button.prototype.constructor = Button;
Button.toString = Button.toJSON = () => {
    return "Button"
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form
Form = _proxy(function (n = "form") {
    Element.call(this, n);
    this._id = _object_id++;
    this._name = "Form[" + this._id + "]";
    this.elementName = "form";
    this._attributes = {};
    util_log("new " + this._name + "()");
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset
    this.reset = function () {
        util_log(this._name + ".reset()");
    }
});
Form.prototype = Object.create(Element.prototype);
Form.prototype.constructor = Form;
Form.toString = Form.toJSON = () => {
    return "Form"
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input
Input = _proxy(function (n = "input") {
    Element.call(this, n);
    this._id = _object_id++;
    this._name = "Input[" + this._id + "]";
    this.elementName = "input";
    this._attributes = {};
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
    this.focus = function () {
        util_log(this._name + ".focus(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.ForceLettersOnly = function () {
        util_log(this._name + ".ForceLettersOnly()");
    }
    this.ForceNumericOnly = function () {
        util_log(this._name + ".ForceNumericOnly()");
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event
    this.keypress = function (listener) {
        return this.addEventListener("keypress", listener);
    }
    this.attr = function (key, value) {
        util_log(this._name + ".attr(" + key + ", " + value + ")");
        this._attributes[key] = value;
    }
    Object.defineProperty(this, "value", {
        get: function () {
            if (["class", "id"].some((key) => key in this._attributes && this._attributes[key].toLowerCase().includes("email"))) {
                return "blah.blah@blah.com";
            } else if (this._attributes["value"]) {
                return this._attributes["value"];
            // Assume the default is a password
            } else {
                return "JsJ@w$==C00l!";
            }
        },
        set: function (value) {
            this._attributes["value"] = value;
        }
    });
});
Input.prototype = Object.create(Element.prototype);
Input.prototype.constructor = Input;
Input.toString = Input.toJSON = () => {
    return "Input"
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
Script = _proxy(function (n = "script") {
    Element.call(this, n);
    this._id = _object_id++;
    this._name = "Script[" + this._id + "]";
    this.elementName = "script";
    this._attributes = {};
    util_log("new " + this._name + "()");
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
    Object.defineProperty(this, "onload", {
        set: function (fn) {
            if (fn.constructor.name === "Function") {
                var function_name = fn.prototype.name;
                if (function_name === undefined) {
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                    function_name = "anonymous";
                }
                util_log(this._name + ".onload(" + function_name + ")")
                var e = null;
                if (document._events.length == 1) {
                    e = document._events[0]
                } else {
                    e = _proxy(new Event("load"));
                    document._events.push(e);
                }
                util_log("Running function " + function_name + "(" + e + ")");
                fn(e);
            }
            else {
                util_log("That's weird, a non-function was passed to window.onload...")
            }
        }
    });
});
Script.prototype = Object.create(Element.prototype);
Script.prototype.constructor = Script;
Script.toString = Script.toJSON = () => {
    return "Script"
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style
Style = _proxy(function (css_text = "") {
    this._id = _object_id++;
    this._name = "Style[" + this._id + "]";
    this.elementName = "style";
    this._attributes = {
        "visibility": true,
        "left": 0,
        "top": 0,
        "position": "",
        "styleSheet": {
            cssText: css_text
        },
        "width": 1920,
        "height": 1080,
        "display": "none",
    };
    // https://developer.mozilla.org/en-US/docs/Web/CSS/background-image
    this.backgroundImage = null;
    // We cannot point the global style to an Element since an Element has a Style attribute and
    // thus creates an endless loop
    this.tagname = "style";
    this.parentNode = this;
    this.removeChild = function (e) {
        util_log(this._name + ".removeChild(" + e._name + ")");
        return e;
    }
    this.toString = this.tostring = () => {
        return this._name;
    }

    for (var k in this._attributes) {
        _defineProperty(this, k, this._attributes);
    }

});
Style.prototype = Object.create(Object.prototype);
Style.prototype.constructor = Style;
Style.toString = Style.toJSON = () => {
    return "Style"
}

// Overriding these methods from third-party libs

// Basic implementation of https://github.com/eligrey/FileSaver.js
saveAs = async function (content, filename) {
    util_log("saveAs(" + content + ", " + filename + ")")

    // Assign the blob contents to the _wscript_saved_files global which will be
    // written to disk after execution
    if (content.constructor.name == "Blob") {
        content = Buffer.from(await content.arrayBuffer());
    }
    _wscript_saved_files[filename] = content;
}

// No idea what _WidgetManager or _WidgetInfo is
_WidgetManager = function () {
    util_log("new _WidgetManager object");
}
_WidgetManager._Init = function () {
    util_log("_WidgetManager._Init(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
}
_WidgetManager._SetDataContext = function () {
    util_log("_WidgetManager._SetDataContext(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
}
_WidgetManager._RegisterWidget = function () {
    util_log("_WidgetManager._RegisterWidget(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
}
_WidgetInfo = function (n) {
    util_log("new _WidgetInfo " + n);
}

// Google Analytics somehow
ga = function () {
    util_log("ga(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
}
