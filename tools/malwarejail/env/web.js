// Interfaces that we want visibility into
// https://developer.mozilla.org/en-US/docs/Web/API#interfaces

AbortController = function () {
    util_log(">>> FIXME: AbortController used");
    return AbortController;
}
AbortSignal = function () {
    util_log(">>> FIXME: AbortSignal used");
    return AbortSignal;
}
AbsoluteOrientationSensor = function () {
    util_log(">>> FIXME: AbsoluteOrientationSensor used");
    return AbsoluteOrientationSensor;
}
AbstractRange = function () {
    util_log(">>> FIXME: AbstractRange used");
    return AbstractRange;
}
Accelerometer = function () {
    util_log(">>> FIXME: Accelerometer used");
    return Accelerometer;
}
AesCbcParams = function () {
    util_log(">>> FIXME: AesCbcParams used");
    return AesCbcParams;
}
AesCtrParams = function () {
    util_log(">>> FIXME: AesCtrParams used");
    return AesCtrParams;
}
AesGcmParams = function () {
    util_log(">>> FIXME: AesGcmParams used");
    return AesGcmParams;
}
AesKeyGenParams = function () {
    util_log(">>> FIXME: AesKeyGenParams used");
    return AesKeyGenParams;
}
AmbientLightSensor = function () {
    util_log(">>> FIXME: AmbientLightSensor used");
    return AmbientLightSensor;
}
AnalyserNode = function () {
    util_log(">>> FIXME: AnalyserNode used");
    return AnalyserNode;
}
ANGLE_instanced_arrays = function () {
    util_log(">>> FIXME: ANGLE_instanced_arrays used");
    return ANGLE_instanced_arrays;
}
Animation = function () {
    util_log(">>> FIXME: Animation used");
    return Animation;
}
AnimationEffect = function () {
    util_log(">>> FIXME: AnimationEffect used");
    return AnimationEffect;
}
AnimationEvent = function () {
    util_log(">>> FIXME: AnimationEvent used");
    return AnimationEvent;
}
AnimationPlaybackEvent = function () {
    util_log(">>> FIXME: AnimationPlaybackEvent used");
    return AnimationPlaybackEvent;
}
AnimationTimeline = function () {
    util_log(">>> FIXME: AnimationTimeline used");
    return AnimationTimeline;
}
Attr = function () {
    util_log(">>> FIXME: Attr used");
    return Attr;
}
AudioBuffer = function () {
    util_log(">>> FIXME: AudioBuffer used");
    return AudioBuffer;
}
AudioBufferSourceNode = function () {
    util_log(">>> FIXME: AudioBufferSourceNode used");
    return AudioBufferSourceNode;
}
AudioContext = function () {
    util_log(">>> FIXME: AudioContext used");
    return AudioContext;
}
AudioData = function () {
    util_log(">>> FIXME: AudioData used");
    return AudioData;
}
AudioDecoder = function () {
    util_log(">>> FIXME: AudioDecoder used");
    return AudioDecoder;
}
AudioDestinationNode = function () {
    util_log(">>> FIXME: AudioDestinationNode used");
    return AudioDestinationNode;
}
AudioEncoder = function () {
    util_log(">>> FIXME: AudioEncoder used");
    return AudioEncoder;
}
AudioListener = function () {
    util_log(">>> FIXME: AudioListener used");
    return AudioListener;
}
AudioNode = function () {
    util_log(">>> FIXME: AudioNode used");
    return AudioNode;
}
AudioParam = function () {
    util_log(">>> FIXME: AudioParam used");
    return AudioParam;
}
AudioParamDescriptor = function () {
    util_log(">>> FIXME: AudioParamDescriptor used");
    return AudioParamDescriptor;
}
AudioParamMap = function () {
    util_log(">>> FIXME: AudioParamMap used");
    return AudioParamMap;
}
AudioProcessingEvent = function () {
    util_log(">>> FIXME: AudioProcessingEvent used");
    return AudioProcessingEvent;
}
AudioScheduledSourceNode = function () {
    util_log(">>> FIXME: AudioScheduledSourceNode used");
    return AudioScheduledSourceNode;
}
AudioSinkInfo = function () {
    util_log(">>> FIXME: AudioSinkInfo used");
    return AudioSinkInfo;
}
AudioTrack = function () {
    util_log(">>> FIXME: AudioTrack used");
    return AudioTrack;
}
AudioTrackList = function () {
    util_log(">>> FIXME: AudioTrackList used");
    return AudioTrackList;
}
AudioWorklet = function () {
    util_log(">>> FIXME: AudioWorklet used");
    return AudioWorklet;
}
AudioWorkletGlobalScope = function () {
    util_log(">>> FIXME: AudioWorkletGlobalScope used");
    return AudioWorkletGlobalScope;
}
AudioWorkletNode = function () {
    util_log(">>> FIXME: AudioWorkletNode used");
    return AudioWorkletNode;
}
AudioWorkletProcessor = function () {
    util_log(">>> FIXME: AudioWorkletProcessor used");
    return AudioWorkletProcessor;
}
AuthenticatorAssertionResponse = function () {
    util_log(">>> FIXME: AuthenticatorAssertionResponse used");
    return AuthenticatorAssertionResponse;
}
AuthenticatorAttestationResponse = function () {
    util_log(">>> FIXME: AuthenticatorAttestationResponse used");
    return AuthenticatorAttestationResponse;
}
AuthenticatorResponse = function () {
    util_log(">>> FIXME: return AuthenticatorResponse used");
    return AuthenticatorResponse;
}
BackgroundFetchEvent = function () {
    util_log(">>> FIXME: return BackgroundFetchEvent used");
    return BackgroundFetchEvent;
}
BackgroundFetchManager = function () {
    util_log(">>> FIXME: BackgroundFetchManager used");
    return BackgroundFetchManager;
}
BackgroundFetchRecord = function () {
    util_log(">>> FIXME: BackgroundFetchRecord used");
    return BackgroundFetchRecord;
}
BackgroundFetchRegistration = function () {
    util_log(">>> FIXME: BackgroundFetchRegistration used");
    return BackgroundFetchRegistration;
}
BackgroundFetchUpdateUIEvent = function () {
    util_log(">>> FIXME: BackgroundFetchUpdateUIEvent used");
    return BackgroundFetchUpdateUIEvent;
}
BarcodeDetector = function () {
    util_log(">>> FIXME: BarcodeDetector used");
    return BarcodeDetector;
}
BarProp = function () {
    util_log(">>> FIXME: BarProp used");
    return BarProp;
}
BaseAudioContext = function () {
    util_log(">>> FIXME: BaseAudioContext used");
    return BaseAudioContext;
}
BatteryManager = function () {
    util_log(">>> FIXME: BatteryManager used");
    return BatteryManager;
}
BeforeInstallPromptEvent = function () {
    util_log(">>> FIXME: BeforeInstallPromptEvent used");
    return BeforeInstallPromptEvent;
}
BeforeUnloadEvent = function () {
    util_log(">>> FIXME: BeforeUnloadEvent used");
    return BeforeUnloadEvent;
}
BiquadFilterNode = function () {
    util_log(">>> FIXME: BiquadFilterNode used");
    return BiquadFilterNode;
}

// https://developer.mozilla.org/en-US/docs/Web/API/Blob
// Since we are overriding the Blob alias from node:buffer via BlobAlias to allow us to write the
//  Blob contents to disk as soon as we see it, we only need to re-implement the
// constructor
Blob = _proxy(function (array, options) {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "Blob[" + this.id + "]";

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob#instance_methods
    // We don't need to implement these

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob#instance_properties
    // We don't need to implement these

    // Constructor
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob
    // Do not log "new this._name (" because this._name is Blob[] which will break the signature "creates_blob"
    if (array === undefined && options === undefined) {
        // Don't log or else a signature will hit
        null;
    } else {
        util_log("new Blob(" + _truncateOutput(array) + ", " + options + ")");
    }

    var blob_filename = "Blob[" + this.id + "]";
    if (options && "filename" in options) {
        blob_filename = options["filename"]
        delete options["filename"]
    }

    // Assign the blob contents to the _wscript_saved_files global which will be
    // written to disk after execution
    const blob = new BlobAlias(sources=array, options=options)
    blob.arrayBuffer().then(function (result) {
        _wscript_saved_files[blob_filename] = Buffer.from(result);
    })
    return blob
});
Blob.toString = Blob.toJSON = () => {
    return "Blob"
}

BlobEvent = function () {
    util_log(">>> FIXME: BlobEvent used");
    return BlobEvent;
}
Bluetooth = function () {
    util_log(">>> FIXME: Bluetooth used");
    return Bluetooth;
}
BluetoothCharacteristicProperties = function () {
    util_log(">>> FIXME: BluetoothCharacteristicProperties used");
    return BluetoothCharacteristicProperties;
}
BluetoothDevice = function () {
    util_log(">>> FIXME: BluetoothDevice used");
    return BluetoothDevice;
}
BluetoothRemoteGATTCharacteristic = function () {
    util_log(">>> FIXME: BluetoothRemoteGATTCharacteristic used");
    return BluetoothRemoteGATTCharacteristic;
}
BluetoothRemoteGATTDescriptor = function () {
    util_log(">>> FIXME: BluetoothRemoteGATTDescriptor used");
    return BluetoothRemoteGATTDescriptor;
}
BluetoothRemoteGATTServer = function () {
    util_log(">>> FIXME: BluetoothRemoteGATTServer used");
    return BluetoothRemoteGATTServer;
}
BluetoothRemoteGATTService = function () {
    util_log(">>> FIXME: BluetoothRemoteGATTService used");
    return BluetoothRemoteGATTService;
}
BluetoothUUID = function () {
    util_log(">>> FIXME: BluetoothUUID used");
    return BluetoothUUID;
}
BroadcastChannel = function () {
    util_log(">>> FIXME: BroadcastChannel used");
    return BroadcastChannel;
}
ByteLengthQueuingStrategy = function () {
    util_log(">>> FIXME: ByteLengthQueuingStrategy used");
    return ByteLengthQueuingStrategy;
}
Cache = function () {
    util_log(">>> FIXME: Cache used");
    return Cache;
}
caches = function () {
    util_log(">>> FIXME: caches used");
    return caches;
}
CacheStorage = function () {
    util_log(">>> FIXME: CacheStorage used");
    return CacheStorage;
}
CanMakePaymentEvent = function () {
    util_log(">>> FIXME: CanMakePaymentEvent used");
    return CanMakePaymentEvent;
}
CanvasCaptureMediaStreamTrack = function () {
    util_log(">>> FIXME: CanvasCaptureMediaStreamTrack used");
    return CanvasCaptureMediaStreamTrack;
}
CanvasGradient = function () {
    util_log(">>> FIXME: CanvasGradient used");
    return CanvasGradient;
}
CanvasPattern = function () {
    util_log(">>> FIXME: CanvasPattern used");
    return CanvasPattern;
}
CanvasRenderingContext2D = function () {
    util_log(">>> FIXME: CanvasRenderingContext2D used");
    return CanvasRenderingContext2D;
}
CaptureController = function () {
    util_log(">>> FIXME: CaptureController used");
    return CaptureController;
}
CaretPosition = function () {
    util_log(">>> FIXME: CaretPosition used");
    return CaretPosition;
}
CDATASection = function () {
    util_log(">>> FIXME: CDATASection used");
    return CDATASection;
}
ChannelMergerNode = function () {
    util_log(">>> FIXME: ChannelMergerNode used");
    return ChannelMergerNode;
}
ChannelSplitterNode = function () {
    util_log(">>> FIXME: ChannelSplitterNode used");
    return ChannelSplitterNode;
}
CharacterData = function () {
    util_log(">>> FIXME: CharacterData used");
    return CharacterData;
}

// clearInterval is passed in from jailme.js
// clearInterval = function () { }

// clearTimeout is passed in from jailme.js
// clearTimeout = function () { }

Client = function () {
    util_log(">>> FIXME: Client used");
    return Client;
}
Clients = function () {
    util_log(">>> FIXME: Clients used");
    return Clients;
}
Clipboard = function () {
    util_log(">>> FIXME: Clipboard used");
    return Clipboard;
}
ClipboardEvent = function () {
    util_log(">>> FIXME: ClipboardEvent used");
    return ClipboardEvent;
}
ClipboardItem = function () {
    util_log(">>> FIXME: ClipboardItem used");
    return ClipboardItem;
}
CloseEvent = function () {
    util_log(">>> FIXME: CloseEvent used");
    return CloseEvent;
}
Comment = function () {
    util_log(">>> FIXME: Comment used");
    return Comment;
}
CompositionEvent = function () {
    util_log(">>> FIXME: CompositionEvent used");
    return CompositionEvent;
}
CompressionStream = function () {
    util_log(">>> FIXME: CompressionStream used");
    return CompressionStream;
}

// This is defined in console.js
// console = function () { }

ConstantSourceNode = function () {
    util_log(">>> FIXME: ConstantSourceNode used");
    return ConstantSourceNode;
}
ContactAddress = function () {
    util_log(">>> FIXME: ContactAddress used");
    return ContactAddress;
}
ContactsManager = function () {
    util_log(">>> FIXME: ContactsManager used");
    return ContactsManager;
}
ContentIndex = function () {
    util_log(">>> FIXME: ContentIndex used");
    return ContentIndex;
}
ContentIndexEvent = function () {
    util_log(">>> FIXME: ContentIndexEvent used");
    return ContentIndexEvent;
}
ContentVisibilityAutoStateChangeEvent = function () {
    util_log(">>> FIXME: ContentVisibilityAutoStateChangeEvent used");
    return ContentVisibilityAutoStateChangeEvent;
}
ConvolverNode = function () {
    util_log(">>> FIXME: ConvolverNode used");
    return ConvolverNode;
}
CookieChangeEvent = function () {
    util_log(">>> FIXME: CookieChangeEvent used");
    return CookieChangeEvent;
}
CookieStore = function () {
    util_log(">>> FIXME: CookieStore used");
    return CookieStore;
}
CookieStoreManager = function () {
    util_log(">>> FIXME: CookieStoreManager used");
    return CookieStoreManager;
}
CountQueuingStrategy = function () {
    util_log(">>> FIXME: CountQueuingStrategy used");
    return CountQueuingStrategy;
}
createImageBitmap = function () {
    util_log(">>> FIXME: createImageBitmap used");
    return createImageBitmap;
}
Credential = function () {
    util_log(">>> FIXME: Credential used");
    return Credential;
}
CredentialsContainer = function () {
    util_log(">>> FIXME: CredentialsContainer used");
    return CredentialsContainer;
}
crossOriginIsolated = function () {
    util_log(">>> FIXME: crossOriginIsolated used");
    return crossOriginIsolated;
}
Crypto = function () {
    util_log(">>> FIXME: Crypto used");
    return Crypto;
}
CryptoKey = function () {
    util_log(">>> FIXME: CryptoKey used");
    return CryptoKey;
}
CryptoKeyPair = function () {
    util_log(">>> FIXME: CryptoKeyPair used");
    return CryptoKeyPair;
}
CSPViolationReportBody = function () {
    util_log(">>> FIXME: CSPViolationReportBody used");
    return CSPViolationReportBody;
}
CSS = function () {
    util_log(">>> FIXME: CSS used");
    return CSS;
}
CSSAnimation = function () {
    util_log(">>> FIXME: CSSAnimation used");
    return CSSAnimation;
}
CSSConditionRule = function () {
    util_log(">>> FIXME: CSSConditionRule used");
    return CSSConditionRule;
}
CSSCounterStyleRule = function () {
    util_log(">>> FIXME: CSSCounterStyleRule used");
    return CSSCounterStyleRule;
}
CSSFontFaceRule = function () {
    util_log(">>> FIXME: CSSFontFaceRule used");
    return CSSFontFaceRule;
}
CSSGroupingRule = function () {
    util_log(">>> FIXME: CSSGroupingRule used");
    return CSSGroupingRule;
}
CSSImageValue = function () {
    util_log(">>> FIXME: CSSImageValue used");
    return CSSImageValue;
}
CSSImportRule = function () {
    util_log(">>> FIXME: CSSImportRule used");
    return CSSImportRule;
}
CSSKeyframeRule = function () {
    util_log(">>> FIXME: CSSKeyframeRule used");
    return CSSKeyframeRule;
}
CSSKeyframesRule = function () {
    util_log(">>> FIXME: CSSKeyframesRule used");
    return CSSKeyframesRule;
}
CSSKeywordValue = function () {
    util_log(">>> FIXME: CSSKeywordValue used");
    return CSSKeywordValue;
}
CSSMathInvert = function () {
    util_log(">>> FIXME: CSSMathInvert used");
    return CSSMathInvert;
}
CSSMathMax = function () {
    util_log(">>> FIXME: CSSMathMax used");
    return CSSMathMax;
}
CSSMathMin = function () {
    util_log(">>> FIXME: CSSMathMin used");
    return CSSMathMin;
}
CSSMathNegate = function () {
    util_log(">>> FIXME: CSSMathNegate used");
    return CSSMathNegate;
}
CSSMathProduct = function () {
    util_log(">>> FIXME: CSSMathProduct used");
    return CSSMathProduct;
}
CSSMathSum = function () {
    util_log(">>> FIXME: CSSMathSum used");
    return CSSMathSum;
}
CSSMathValue = function () {
    util_log(">>> FIXME: CSSMathValue used");
    return CSSMathValue;
}
CSSMatrixComponent = function () {
    util_log(">>> FIXME: CSSMatrixComponent used");
    return CSSMatrixComponent;
}
CSSMediaRule = function () {
    util_log(">>> FIXME: CSSMediaRule used");
    return CSSMediaRule;
}
CSSNamespaceRule = function () {
    util_log(">>> FIXME: CSSNamespaceRule used");
    return CSSNamespaceRule;
}
CSSNumericArray = function () {
    util_log(">>> FIXME: CSSNumericArray used");
    return CSSNumericArray;
}
CSSNumericValue = function () {
    util_log(">>> FIXME: CSSNumericValue used");
    return CSSNumericValue;
}
CSSPageRule = function () {
    util_log(">>> FIXME: CSSPageRule used");
    return CSSPageRule;
}
CSSPerspective = function () {
    util_log(">>> FIXME: CSSPerspective used");
    return CSSPerspective;
}
CSSPositionValue = function () {
    util_log(">>> FIXME: CSSPositionValue used");
    return CSSPositionValue;
}
CSSPrimitiveValue = function () {
    util_log(">>> FIXME: CSSPrimitiveValue used");
    return CSSPrimitiveValue;
}
CSSPropertyRule = function () {
    util_log(">>> FIXME: CSSPropertyRule used");
    return CSSPropertyRule;
}
CSSPseudoElement = function () {
    util_log(">>> FIXME: CSSPseudoElement used");
    return CSSPseudoElement;
}
CSSRotate = function () {
    util_log(">>> FIXME: CSSRotate used");
    return CSSRotate;
}
CSSRule = function () {
    util_log(">>> FIXME: CSSRule used");
    return CSSRule;
}
CSSRuleList = function () {
    util_log(">>> FIXME: CSSRuleList used");
    return CSSRuleList;
}
CSSScale = function () {
    util_log(">>> FIXME: CSSScale used");
    return CSSScale;
}
CSSSkew = function () {
    util_log(">>> FIXME: CSSSkew used");
    return CSSSkew;
}
CSSSkewX = function () {
    util_log(">>> FIXME: CSSSkewX used");
    return CSSSkewX;
}
CSSSkewY = function () {
    util_log(">>> FIXME: CSSSkewY used");
    return CSSSkewY;
}
CSSStyleDeclaration = function () {
    util_log(">>> FIXME: CSSStyleDeclaration used");
    return CSSStyleDeclaration;
}
CSSStyleRule = function () {
    util_log(">>> FIXME: CSSStyleRule used");
    return CSSStyleRule;
}
CSSStyleSheet = function () {
    util_log(">>> FIXME: CSSStyleSheet used");
    return CSSStyleSheet;
}
CSSStyleValue = function () {
    util_log(">>> FIXME: CSSStyleValue used");
    return CSSStyleValue;
}
CSSSupportsRule = function () {
    util_log(">>> FIXME: CSSSupportsRule used");
    return CSSSupportsRule;
}
CSSTransformComponent = function () {
    util_log(">>> FIXME: CSSTransformComponent used");
    return CSSTransformComponent;
}
CSSTransformValue = function () {
    util_log(">>> FIXME: CSSTransformValue used");
    return CSSTransformValue;
}
CSSTransition = function () {
    util_log(">>> FIXME: CSSTransition used");
    return CSSTransition;
}
CSSTranslate = function () {
    util_log(">>> FIXME: CSSTranslate used");
    return CSSTranslate;
}
CSSUnitValue = function () {
    util_log(">>> FIXME: CSSUnitValue used");
    return CSSUnitValue;
}
CSSUnparsedValue = function () {
    util_log(">>> FIXME: CSSUnparsedValue used");
    return CSSUnparsedValue;
}
CSSValue = function () {
    util_log(">>> FIXME: CSSValue used");
    return CSSValue;
}
CSSValueList = function () {
    util_log(">>> FIXME: CSSValueList used");
    return CSSValueList;
}
CSSVariableReferenceValue = function () {
    util_log(">>> FIXME: CSSVariableReferenceValue used");
    return CSSVariableReferenceValue;
}
CustomElementRegistry = function () {
    util_log(">>> FIXME: CustomElementRegistry used");
    return CustomElementRegistry;
}
CustomEvent = function () {
    util_log(">>> FIXME: CustomEvent used");
    return CustomEvent;
}
CustomStateSet = function () {
    util_log(">>> FIXME: CustomStateSet used");
    return CustomStateSet;
}
DataTransfer = function () {
    util_log(">>> FIXME: DataTransfer used");
    return DataTransfer;
}
DataTransferItem = function () {
    util_log(">>> FIXME: DataTransferItem used");
    return DataTransferItem;
}
DataTransferItemList = function () {
    util_log(">>> FIXME: DataTransferItemList used");
    return DataTransferItemList;
}
DecompressionStream = function () {
    util_log(">>> FIXME: DecompressionStream used");
    return DecompressionStream;
}
DedicatedWorkerGlobalScope = function () {
    util_log(">>> FIXME: DedicatedWorkerGlobalScope used");
    return DedicatedWorkerGlobalScope;
}
DelayNode = function () {
    util_log(">>> FIXME: DelayNode used");
    return DelayNode;
}
DeprecationReportBody = function () {
    util_log(">>> FIXME: DeprecationReportBody used");
    return DeprecationReportBody;
}
DeviceMotionEvent = function () {
    util_log(">>> FIXME: DeviceMotionEvent used");
    return DeviceMotionEvent;
}
DeviceMotionEventAcceleration = function () {
    util_log(">>> FIXME: DeviceMotionEventAcceleration used");
    return DeviceMotionEventAcceleration;
}
DeviceMotionEventRotationRate = function () {
    util_log(">>> FIXME: DeviceMotionEventRotationRate used");
    return DeviceMotionEventRotationRate;
}
DeviceOrientationEvent = function () {
    util_log(">>> FIXME: DeviceOrientationEvent used");
    return DeviceOrientationEvent;
}
DeviceProximityEvent = function () {
    util_log(">>> FIXME: DeviceProximityEvent used");
    return DeviceProximityEvent;
}
DirectoryEntrySync = function () {
    util_log(">>> FIXME: DirectoryEntrySync used");
    return DirectoryEntrySync;
}
DirectoryReaderSync = function () {
    util_log(">>> FIXME: DirectoryReaderSync used");
    return DirectoryReaderSync;
}

// This is defined in browser.js
// Document = function () {}

DocumentFragment = function () {
    util_log(">>> FIXME: DocumentFragment used");
    return DocumentFragment;
}
DocumentTimeline = function () {
    util_log(">>> FIXME: DocumentTimeline used");
    return DocumentTimeline;
}
DocumentType = function () {
    util_log(">>> FIXME: DocumentType used");
    return DocumentType;
}
DOMError = function () {
    util_log(">>> FIXME: DOMError used");
    return DOMError;
}
DOMException = function () {
    util_log(">>> FIXME: DOMException used");
    return DOMException;
}
DOMHighResTimeStamp = function () {
    util_log(">>> FIXME: DOMHighResTimeStamp used");
    return DOMHighResTimeStamp;
}
DOMImplementation = function () {
    util_log(">>> FIXME: DOMImplementation used");
    return DOMImplementation;
}
DOMMatrix = function () {
    util_log(">>> FIXME: DOMMatrix used");
    return DOMMatrix;
}
DOMMatrixReadOnly = function () {
    util_log(">>> FIXME: DOMMatrixReadOnly used");
    return DOMMatrixReadOnly;
}
DOMParser = function () {
    util_log(">>> FIXME: DOMParser used");
    return DOMParser;
}
DOMPoint = function () {
    util_log(">>> FIXME: DOMPoint used");
    return DOMPoint;
}
DOMPointReadOnly = function () {
    util_log(">>> FIXME: DOMPointReadOnly used");
    return DOMPointReadOnly;
}
DOMQuad = function () {
    util_log(">>> FIXME: DOMQuad used");
    return DOMQuad;
}
DOMRect = function () {
    util_log(">>> FIXME: DOMRect used");
    return DOMRect;
}
DOMRectReadOnly = function () {
    util_log(">>> FIXME: DOMRectReadOnly used");
    return DOMRectReadOnly;
}
DOMStringList = function () {
    util_log(">>> FIXME: DOMStringList used");
    return DOMStringList;
}
DOMStringMap = function () {
    util_log(">>> FIXME: DOMStringMap used");
    return DOMStringMap;
}
DOMTokenList = function () {
    util_log(">>> FIXME: DOMTokenList used");
    return DOMTokenList;
}
DragEvent = function () {
    util_log(">>> FIXME: DragEvent used");
    return DragEvent;
}
DynamicsCompressorNode = function () {
    util_log(">>> FIXME: DynamicsCompressorNode used");
    return DynamicsCompressorNode;
}
EcdhKeyDeriveParams = function () {
    util_log(">>> FIXME: EcdhKeyDeriveParams used");
    return EcdhKeyDeriveParams;
}
EcdsaParams = function () {
    util_log(">>> FIXME: EcdsaParams used");
    return EcdsaParams;
}
EcKeyGenParams = function () {
    util_log(">>> FIXME: EcKeyGenParams used");
    return EcKeyGenParams;
}
EcKeyImportParams = function () {
    util_log(">>> FIXME: EcKeyImportParams used");
    return EcKeyImportParams;
}

// This is defined in element.js
// Element = function () { }

ElementInternals = function () {
    util_log(">>> FIXME: ElementInternals used");
    return ElementInternals;
}
EncodedAudioChunk = function () {
    util_log(">>> FIXME: EncodedAudioChunk used");
    return EncodedAudioChunk;
}
EncodedVideoChunk = function () {
    util_log(">>> FIXME: EncodedVideoChunk used");
    return EncodedVideoChunk;
}
ErrorEvent = function () {
    util_log(">>> FIXME: ErrorEvent used");
    return ErrorEvent;
}

// https://developer.mozilla.org/en-US/docs/Web/API/Event
Event = function (type) {
    this._id = _object_id++;
    this._name = "Event[" + this._id + "](" + type + ")";
    this.origin = "null";
    this.data = "get";
    this.source = window;
    this.type = type;

    // According to this: https://unixpapa.com/js/mouse.html
    // 1 is the left button on a mouse
    Object.defineProperty(this, "which", {
        get: function () {
            util_log(this._name + "which.get() => 1");
            return 1;
        }
    });

    // Assign the Keyboard event type to the keycode
    Object.defineProperty(this, "keyCode", {
        get: function () {
            if (this.type in KEYBOARD_EVENT_KEYCODE_MAP) {
                let keyCode = KEYBOARD_EVENT_KEYCODE_MAP[this.type];
                util_log(this._name + ".keyCode.get() => " + keyCode);
                return keyCode;
            } else {
                util_log(">>> FIXME: Add '" + this.type + "' to the KEYBOARD_EVENT_KEYCODE_MAP");
                return undefined
            }
        }
    });

    util_log("new " + this._name);

    // https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault
    this.preventDefault = function () {
        util_log(this._name + ".preventDefault(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    }
};

EventCounts = function () {
    util_log(">>> FIXME: EventCounts used");
    return EventCounts;
}
EventSource = function () {
    util_log(">>> FIXME: EventSource used");
    return EventSource;
}

// This is defined in element.js
// EventTarget = function () { }

EXT_blend_minmax = function () {
    util_log(">>> FIXME: EXT_blend_minmax used");
    return EXT_blend_minmax;
}
EXT_color_buffer_float = function () {
    util_log(">>> FIXME: EXT_color_buffer_float used");
    return EXT_color_buffer_float;
}
EXT_color_buffer_half_float = function () {
    util_log(">>> FIXME: EXT_color_buffer_half_float used");
    return EXT_color_buffer_half_float;
}
EXT_disjoint_timer_query = function () {
    util_log(">>> FIXME: EXT_disjoint_timer_query used");
    return EXT_disjoint_timer_query;
}
EXT_float_blend = function () {
    util_log(">>> FIXME: EXT_float_blend used");
    return EXT_float_blend;
}
EXT_frag_depth = function () {
    util_log(">>> FIXME: EXT_frag_depth used");
    return EXT_frag_depth;
}
EXT_shader_texture_lod = function () {
    util_log(">>> FIXME: EXT_shader_texture_lod used");
    return EXT_shader_texture_lod;
}
EXT_sRGB = function () {
    util_log(">>> FIXME: EXT_sRGB used");
    return EXT_sRGB;
}
EXT_texture_compression_bptc = function () {
    util_log(">>> FIXME: EXT_texture_compression_bptc used");
    return EXT_texture_compression_bptc;
}
EXT_texture_compression_rgtc = function () {
    util_log(">>> FIXME: EXT_texture_compression_rgtc used");
    return EXT_texture_compression_rgtc;
}
EXT_texture_filter_anisotropic = function () {
    util_log(">>> FIXME: EXT_texture_filter_anisotropic used");
    return EXT_texture_filter_anisotropic;
}
EXT_texture_norm16 = function () {
    util_log(">>> FIXME: EXT_texture_norm16 used");
    return EXT_texture_norm16;
}
ExtendableCookieChangeEvent = function () {
    util_log(">>> FIXME: ExtendableCookieChangeEvent used");
    return ExtendableCookieChangeEvent;
}
ExtendableEvent = function () {
    util_log(">>> FIXME: ExtendableEvent used");
    return ExtendableEvent;
}
ExtendableMessageEvent = function () {
    util_log(">>> FIXME: ExtendableMessageEvent used");
    return ExtendableMessageEvent;
}
EyeDropper = function () {
    util_log(">>> FIXME: EyeDropper used");
    return EyeDropper;
}
FeaturePolicy = function () {
    util_log(">>> FIXME: FeaturePolicy used");
    return FeaturePolicy;
}
FederatedCredential = function () {
    util_log(">>> FIXME: FederatedCredential used");
    return FederatedCredential;
}

// https://developer.mozilla.org/en-US/docs/Web/API/fetch
// We need to declare this before Document
fetch = function (url) {
    util_log("fetch("+url+")");
    var ret = new XMLHttpRequest();
    ret.open("get", url);
    ret.send();
    if (is_domain_geo(url)) {
        var response = new Response(JSON.stringify(domain_geo_response));
        return response;
    }
}

FetchEvent = function () {
    util_log(">>> FIXME: FetchEvent used");
    return FetchEvent;
}

// https://developer.mozilla.org/en-US/docs/Web/API/File
File = _proxy(function (bits, name, options = undefined) {
    Blob.call(this);

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/File#instance_methods
    // All instance methods are inherited from the Blob interface

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/File#instance_properties

    _defineSingleProperty(this, "lastModified")
    _defineSingleProperty(this, "lastModifiedDate")

    // We cannot define this because it is already assigned as a private field for MalwareJail's usage in the Blob interface
    // _defineSingleProperty(this, "name")
    _defineSingleProperty(this, "webkitRelativePath")

    // File implements Blob, so the following properties are inherited from the Blob interface
    // _defineSingleProperty(this, "size")
    // _defineSingleProperty(this, "type")

    // Constructor
    // https://developer.mozilla.org/en-US/docs/Web/API/File/File
    util_log("new File(" + bits + ", " + name + ", " + options + ")")
    options["filename"] = name;
    const blob = new Blob(bits, options);

    // We don't need to write the contents to a _wscript_save_file because the Blob class already does that...
    return blob;
});
File.prototype = Object.create(Blob.prototype);
File.prototype.constructor = File;
File.toString = File.toJSON = () => {
    return "File"
}

FileEntrySync = function () {
    util_log(">>> FIXME: FileEntrySync used");
    return FileEntrySync;
}
FileList = function () {
    util_log(">>> FIXME: FileList used");
    return FileList;
}
FileReader = function () {
    util_log(">>> FIXME: FileReader used");
    return FileReader;
}
FileReaderSync = function () {
    util_log(">>> FIXME: FileReaderSync used");
    return FileReaderSync;
}
FileSystem = function () {
    util_log(">>> FIXME: FileSystem used");
    return FileSystem;
}
FileSystemDirectoryEntry = function () {
    util_log(">>> FIXME: FileSystemDirectoryEntry used");
    return FileSystemDirectoryEntry;
}
FileSystemDirectoryHandle = function () {
    util_log(">>> FIXME: FileSystemDirectoryHandle used");
    return FileSystemDirectoryHandle;
}
FileSystemDirectoryReader = function () {
    util_log(">>> FIXME: FileSystemDirectoryReader used");
    return FileSystemDirectoryReader;
}
FileSystemEntry = function () {
    util_log(">>> FIXME: FileSystemEntry used");
    return FileSystemEntry;
}
FileSystemFileEntry = function () {
    util_log(">>> FIXME: FileSystemFileEntry used");
    return FileSystemFileEntry;
}
FileSystemFileHandle = function () {
    util_log(">>> FIXME: FileSystemFileHandle used");
    return FileSystemFileHandle;
}
FileSystemHandle = function () {
    util_log(">>> FIXME: FileSystemHandle used");
    return FileSystemHandle;
}
FileSystemSync = function () {
    util_log(">>> FIXME: FileSystemSync used");
    return FileSystemSync;
}
FileSystemSyncAccessHandle = function () {
    util_log(">>> FIXME: FileSystemSyncAccessHandle used");
    return FileSystemSyncAccessHandle;
}
FileSystemWritableFileStream = function () {
    util_log(">>> FIXME: FileSystemWritableFileStream used");
    return FileSystemWritableFileStream;
}
FocusEvent = function () {
    util_log(">>> FIXME: FocusEvent used");
    return FocusEvent;
}
FontData = function () {
    util_log(">>> FIXME: FontData used");
    return FontData;
}
FontFace = function () {
    util_log(">>> FIXME: FontFace used");
    return FontFace;
}
FontFaceSet = function () {
    util_log(">>> FIXME: FontFaceSet used");
    return FontFaceSet;
}
FontFaceSetLoadEvent = function () {
    util_log(">>> FIXME: FontFaceSetLoadEvent used");
    return FontFaceSetLoadEvent;
}
FormData = function () {
    util_log(">>> FIXME: FormData used");
    return FormData;
}
FormDataEvent = function () {
    util_log(">>> FIXME: FormDataEvent used");
    return FormDataEvent;
}
FragmentDirective = function () {
    util_log(">>> FIXME: FragmentDirective used");
    return FragmentDirective;
}
GainNode = function () {
    util_log(">>> FIXME: GainNode used");
    return GainNode;
}
Gamepad = function () {
    util_log(">>> FIXME: Gamepad used");
    return Gamepad;
}
GamepadButton = function () {
    util_log(">>> FIXME: GamepadButton used");
    return GamepadButton;
}
GamepadEvent = function () {
    util_log(">>> FIXME: GamepadEvent used");
    return GamepadEvent;
}
GamepadHapticActuator = function () {
    util_log(">>> FIXME: GamepadHapticActuator used");
    return GamepadHapticActuator;
}
GamepadPose = function () {
    util_log(">>> FIXME: GamepadPose used");
    return GamepadPose;
}
Geolocation = function () {
    util_log(">>> FIXME: Geolocation used");
    return Geolocation;
}
GeolocationCoordinates = function () {
    util_log(">>> FIXME: GeolocationCoordinates used");
    return GeolocationCoordinates;
}
GeolocationPosition = function () {
    util_log(">>> FIXME: GeolocationPosition used");
    return GeolocationPosition;
}
GeolocationPositionError = function () {
    util_log(">>> FIXME: GeolocationPositionError used");
    return GeolocationPositionError;
}
GestureEvent = function () {
    util_log(">>> FIXME: GestureEvent used");
    return GestureEvent;
}
GravitySensor = function () {
    util_log(">>> FIXME: GravitySensor used");
    return GravitySensor;
}
Gyroscope = function () {
    util_log(">>> FIXME: Gyroscope used");
    return Gyroscope;
}
HashChangeEvent = function () {
    util_log(">>> FIXME: HashChangeEvent used");
    return HashChangeEvent;
}
Headers = function () {
    util_log(">>> FIXME: Headers used");
    return Headers;
}
HID = function () {
    util_log(">>> FIXME: HID used");
    return HID;
}
HIDConnectionEvent = function () {
    util_log(">>> FIXME: HIDConnectionEvent used");
    return HIDConnectionEvent;
}
HIDDevice = function () {
    util_log(">>> FIXME: HIDDevice used");
    return HIDDevice;
}
HIDInputReportEvent = function () {
    util_log(">>> FIXME: HIDInputReportEvent used");
    return HIDInputReportEvent;
}
Highlight = function () {
    util_log(">>> FIXME: Highlight used");
    return Highlight;
}
HighlightRegistry = function () {
    util_log(">>> FIXME: HighlightRegistry used");
    return HighlightRegistry;
}
History = function () {
    util_log(">>> FIXME: History used");
    return History;
}
HkdfParams = function () {
    util_log(">>> FIXME: HkdfParams used");
    return HkdfParams;
}
HmacImportParams = function () {
    util_log(">>> FIXME: HmacImportParams used");
    return HmacImportParams;
}
HmacKeyGenParams = function () {
    util_log(">>> FIXME: HmacKeyGenParams used");
    return HmacKeyGenParams;
}
HMDVRDevice = function () {
    util_log(">>> FIXME: HMDVRDevice used");
    return HMDVRDevice;
}

HTMLAreaElement = function () {
    util_log(">>> FIXME: HTMLAreaElement used");
    return HTMLAreaElement;
}
HTMLAudioElement = function () {
    util_log(">>> FIXME: HTMLAudioElement used");
    return HTMLAudioElement;
}
HTMLBaseElement = function () {
    util_log(">>> FIXME: HTMLBaseElement used");
    return HTMLBaseElement;
}
HTMLBodyElement = function () {
    util_log(">>> FIXME: HTMLBodyElement used");
    return HTMLBodyElement;
}
HTMLBRElement = function () {
    util_log(">>> FIXME: HTMLBRElement used");
    return HTMLBRElement;
}

HTMLCanvasElement = function () {
    util_log(">>> FIXME: HTMLCanvasElement used");
    return HTMLCanvasElement;
}
HTMLCollection = function () {
    util_log(">>> FIXME: HTMLCollection used");
    return HTMLCollection;
}
HTMLContentElement = function () {
    util_log(">>> FIXME: HTMLContentElement used");
    return HTMLContentElement;
}
HTMLDataElement = function () {
    util_log(">>> FIXME: HTMLDataElement used");
    return HTMLDataElement;
}
HTMLDataListElement = function () {
    util_log(">>> FIXME: HTMLDataListElement used");
    return HTMLDataListElement;
}
HTMLDetailsElement = function () {
    util_log(">>> FIXME: HTMLDetailsElement used");
    return HTMLDetailsElement;
}
HTMLDialogElement = function () {
    util_log(">>> FIXME: HTMLDialogElement used");
    return HTMLDialogElement;
}
HTMLDivElement = function () {
    util_log(">>> FIXME: HTMLDivElement used");
    return HTMLDivElement;
}
HTMLDListElement = function () {
    util_log(">>> FIXME: HTMLDListElement used");
    return HTMLDListElement;
}
HTMLDocument = function () {
    util_log(">>> FIXME: HTMLDocument used");
    return HTMLDocument;
}

// This is assigned to Element once Element is defined
// HTMLElement = function () { }

HTMLEmbedElement = function () {
    util_log(">>> FIXME: HTMLEmbedElement used");
    return HTMLEmbedElement;
}
HTMLFieldSetElement = function () {
    util_log(">>> FIXME: HTMLFieldSetElement used");
    return HTMLFieldSetElement;
}
HTMLFontElement = function () {
    util_log(">>> FIXME: HTMLFontElement used");
    return HTMLFontElement;
}
HTMLFormControlsCollection = function () {
    util_log(">>> FIXME: HTMLFormControlsCollection used");
    return HTMLFormControlsCollection;
}
HTMLFrameSetElement = function () {
    util_log(">>> FIXME: HTMLFrameSetElement used");
    return HTMLFrameSetElement;
}
HTMLHeadElement = function () {
    util_log(">>> FIXME: HTMLHeadElement used");
    return HTMLHeadElement;
}
HTMLHeadingElement = function () {
    util_log(">>> FIXME: HTMLHeadingElement used");
    return HTMLHeadingElement;
}
HTMLHRElement = function () {
    util_log(">>> FIXME: HTMLHRElement used");
    return HTMLHRElement;
}
HTMLHtmlElement = function () {
    util_log(">>> FIXME: HTMLHtmlElement used");
    return HTMLHtmlElement;
}

// This is defined once Element is defined
// HTMLIFrameElement = function () { }

HTMLImageElement = function () {
    util_log(">>> FIXME: HTMLImageElement used");
    return HTMLImageElement;
}
HTMLLabelElement = function () {
    util_log(">>> FIXME: HTMLLabelElement used");
    return HTMLLabelElement;
}
HTMLLegendElement = function () {
    util_log(">>> FIXME: HTMLLegendElement used");
    return HTMLLegendElement;
}
HTMLLIElement = function () {
    util_log(">>> FIXME: HTMLLIElement used");
    return HTMLLIElement;
}
HTMLLinkElement = function () {
    util_log(">>> FIXME: HTMLLinkElement used");
    return HTMLLinkElement;
}
HTMLMapElement = function () {
    util_log(">>> FIXME: HTMLMapElement used");
    return HTMLMapElement;
}
HTMLMarqueeElement = function () {
    util_log(">>> FIXME: HTMLMarqueeElement used");
    return HTMLMarqueeElement;
}
HTMLMediaElement = function () {
    util_log(">>> FIXME: HTMLMediaElement used");
    return HTMLMediaElement;
}
HTMLMenuElement = function () {
    util_log(">>> FIXME: HTMLMenuElement used");
    return HTMLMenuElement;
}
HTMLMenuItemElement = function () {
    util_log(">>> FIXME: HTMLMenuItemElement used");
    return HTMLMenuItemElement;
}
HTMLMetaElement = function () {
    util_log(">>> FIXME: HTMLMetaElement used");
    return HTMLMetaElement;
}
HTMLMeterElement = function () {
    util_log(">>> FIXME: HTMLMeterElement used");
    return HTMLMeterElement;
}
HTMLModElement = function () {
    util_log(">>> FIXME: HTMLModElement used");
    return HTMLModElement;
}
HTMLObjectElement = function () {
    util_log(">>> FIXME: HTMLObjectElement used");
    return HTMLObjectElement;
}
HTMLOListElement = function () {
    util_log(">>> FIXME: HTMLOListElement used");
    return HTMLOListElement;
}
HTMLOptGroupElement = function () {
    util_log(">>> FIXME: HTMLOptGroupElement used");
    return HTMLOptGroupElement;
}
HTMLOptionElement = function () {
    util_log(">>> FIXME: HTMLOptionElement used");
    return HTMLOptionElement;
}
HTMLOptionsCollection = function () {
    util_log(">>> FIXME: HTMLOptionsCollection used");
    return HTMLOptionsCollection;
}
HTMLOutputElement = function () {
    util_log(">>> FIXME: HTMLOutputElement used");
    return HTMLOutputElement;
}
HTMLParagraphElement = function () {
    util_log(">>> FIXME: HTMLParagraphElement used");
    return HTMLParagraphElement;
}
HTMLParamElement = function () {
    util_log(">>> FIXME: HTMLParamElement used");
    return HTMLParamElement;
}
HTMLPictureElement = function () {
    util_log(">>> FIXME: HTMLPictureElement used");
    return HTMLPictureElement;
}
HTMLPreElement = function () {
    util_log(">>> FIXME: HTMLPreElement used");
    return HTMLPreElement;
}
HTMLProgressElement = function () {
    util_log(">>> FIXME: HTMLProgressElement used");
    return HTMLProgressElement;
}
HTMLQuoteElement = function () {
    util_log(">>> FIXME: HTMLQuoteElement used");
    return HTMLQuoteElement;
}
HTMLSelectElement = function () {
    util_log(">>> FIXME: HTMLSelectElement used");
    return HTMLSelectElement;
}
HTMLShadowElement = function () {
    util_log(">>> FIXME: HTMLShadowElement used");
    return HTMLShadowElement;
}
HTMLSlotElement = function () {
    util_log(">>> FIXME: HTMLSlotElement used");
    return HTMLSlotElement;
}
HTMLSourceElement = function () {
    util_log(">>> FIXME: HTMLSourceElement used");
    return HTMLSourceElement;
}
HTMLSpanElement = function () {
    util_log(">>> FIXME: HTMLSpanElement used");
    return HTMLSpanElement;
}
HTMLTableCaptionElement = function () {
    util_log(">>> FIXME: HTMLTableCaptionElement used");
    return HTMLTableCaptionElement;
}
HTMLTableCellElement = function () {
    util_log(">>> FIXME: HTMLTableCellElement used");
    return HTMLTableCellElement;
}
HTMLTableColElement = function () {
    util_log(">>> FIXME: HTMLTableColElement used");
    return HTMLTableColElement;
}
HTMLTableElement = function () {
    util_log(">>> FIXME: HTMLTableElement used");
    return HTMLTableElement;
}
HTMLTableRowElement = function () {
    util_log(">>> FIXME: HTMLTableRowElement used");
    return HTMLTableRowElement;
}
HTMLTableSectionElement = function () {
    util_log(">>> FIXME: HTMLTableSectionElement used");
    return HTMLTableSectionElement;
}
HTMLTemplateElement = function () {
    util_log(">>> FIXME: HTMLTemplateElement used");
    return HTMLTemplateElement;
}
HTMLTextAreaElement = function () {
    util_log(">>> FIXME: HTMLTextAreaElement used");
    return HTMLTextAreaElement;
}
HTMLTimeElement = function () {
    util_log(">>> FIXME: HTMLTimeElement used");
    return HTMLTimeElement;
}
HTMLTitleElement = function () {
    util_log(">>> FIXME: HTMLTitleElement used");
    return HTMLTitleElement;
}
HTMLTrackElement = function () {
    util_log(">>> FIXME: HTMLTrackElement used");
    return HTMLTrackElement;
}
HTMLUListElement = function () {
    util_log(">>> FIXME: HTMLUListElement used");
    return HTMLUListElement;
}
HTMLUnknownElement = function () {
    util_log(">>> FIXME: HTMLUnknownElement used");
    return HTMLUnknownElement;
}
HTMLVideoElement = function () {
    util_log(">>> FIXME: HTMLVideoElement used");
    return HTMLVideoElement;
}
IDBCursor = function () {
    util_log(">>> FIXME: IDBCursor used");
    return IDBCursor;
}
IDBCursorWithValue = function () {
    util_log(">>> FIXME: IDBCursorWithValue used");
    return IDBCursorWithValue;
}
IDBDatabase = function () {
    util_log(">>> FIXME: IDBDatabase used");
    return IDBDatabase;
}
IDBFactory = function () {
    util_log(">>> FIXME: IDBFactory used");
    return IDBFactory;
}
IDBFileHandle = function () {
    util_log(">>> FIXME: IDBFileHandle used");
    return IDBFileHandle;
}
IDBFileRequest = function () {
    util_log(">>> FIXME: IDBFileRequest used");
    return IDBFileRequest;
}
IDBIndex = function () {
    util_log(">>> FIXME: IDBIndex used");
    return IDBIndex;
}
IDBKeyRange = function () {
    util_log(">>> FIXME: IDBKeyRange used");
    return IDBKeyRange;
}
IDBLocaleAwareKeyRange = function () {
    util_log(">>> FIXME: IDBLocaleAwareKeyRange used");
    return IDBLocaleAwareKeyRange;
}
IDBMutableFile = function () {
    util_log(">>> FIXME: IDBMutableFile used");
    return IDBMutableFile;
}
IDBObjectStore = function () {
    util_log(">>> FIXME: IDBObjectStore used");
    return IDBObjectStore;
}
IDBOpenDBRequest = function () {
    util_log(">>> FIXME: IDBOpenDBRequest used");
    return IDBOpenDBRequest;
}
IDBRequest = function () {
    util_log(">>> FIXME: IDBRequest used");
    return IDBRequest;
}
IDBTransaction = function () {
    util_log(">>> FIXME: IDBTransaction used");
    return IDBTransaction;
}
IDBVersionChangeEvent = function () {
    util_log(">>> FIXME: IDBVersionChangeEvent used");
    return IDBVersionChangeEvent;
}
IdleDeadline = function () {
    util_log(">>> FIXME: IdleDeadline used");
    return IdleDeadline;
}
IdleDetector = function () {
    util_log(">>> FIXME: IdleDetector used");
    return IdleDetector;
}
IIRFilterNode = function () {
    util_log(">>> FIXME: IIRFilterNode used");
    return IIRFilterNode;
}
ImageBitmap = function () {
    util_log(">>> FIXME: ImageBitmap used");
    return ImageBitmap;
}
ImageBitmapRenderingContext = function () {
    util_log(">>> FIXME: ImageBitmapRenderingContext used");
    return ImageBitmapRenderingContext;
}
ImageCapture = function () {
    util_log(">>> FIXME: ImageCapture used");
    return ImageCapture;
}
ImageData = function () {
    util_log(">>> FIXME: ImageData used");
    return ImageData;
}
ImageDecoder = function () {
    util_log(">>> FIXME: ImageDecoder used");
    return ImageDecoder;
}
ImageTrack = function () {
    util_log(">>> FIXME: ImageTrack used");
    return ImageTrack;
}
ImageTrackList = function () {
    util_log(">>> FIXME: ImageTrackList used");
    return ImageTrackList;
}
indexedDB = function () {
    util_log(">>> FIXME: indexedDB used");
    return indexedDB;
}
Ink = function () {
    util_log(">>> FIXME: Ink used");
    return Ink;
}
InkPresenter = function () {
    util_log(">>> FIXME: InkPresenter used");
    return InkPresenter;
}
InputDeviceCapabilities = function () {
    util_log(">>> FIXME: InputDeviceCapabilities used");
    return InputDeviceCapabilities;
}
InputDeviceInfo = function () {
    util_log(">>> FIXME: InputDeviceInfo used");
    return InputDeviceInfo;
}
InputEvent = function () {
    util_log(">>> FIXME: InputEvent used");
    return InputEvent;
}
InstallEvent = function () {
    util_log(">>> FIXME: InstallEvent used");
    return InstallEvent;
}
IntersectionObserver = function () {
    util_log(">>> FIXME: IntersectionObserver used");
    return IntersectionObserver;
}
IntersectionObserverEntry = function () {
    util_log(">>> FIXME: IntersectionObserverEntry used");
    return IntersectionObserverEntry;
}
InterventionReportBody = function () {
    util_log(">>> FIXME: InterventionReportBody used");
    return InterventionReportBody;
}
isSecureContext = function () {
    util_log(">>> FIXME: isSecureContext used");
    return isSecureContext;
}
Keyboard = function () {
    util_log(">>> FIXME: Keyboard used");
    return Keyboard;
}
KeyboardEvent = function () {
    util_log(">>> FIXME: KeyboardEvent used");
    return KeyboardEvent;
}
KeyboardLayoutMap = function () {
    util_log(">>> FIXME: KeyboardLayoutMap used");
    return KeyboardLayoutMap;
}
KeyframeEffect = function () {
    util_log(">>> FIXME: KeyframeEffect used");
    return KeyframeEffect;
}
KHR_parallel_shader_compile = function () {
    util_log(">>> FIXME: KHR_parallel_shader_compile used");
    return KHR_parallel_shader_compile;
}
LargestContentfulPaint = function () {
    util_log(">>> FIXME: LargestContentfulPaint used");
    return LargestContentfulPaint;
}
LaunchParams = function () {
    util_log(">>> FIXME: LaunchParams used");
    return LaunchParams;
}
LaunchQueue = function () {
    util_log(">>> FIXME: LaunchQueue used");
    return LaunchQueue;
}
LayoutShift = function () {
    util_log(">>> FIXME: LayoutShift used");
    return LayoutShift;
}
LayoutShiftAttribution = function () {
    util_log(">>> FIXME: LayoutShiftAttribution used");
    return LayoutShiftAttribution;
}
LinearAccelerationSensor = function () {
    util_log(">>> FIXME: LinearAccelerationSensor used");
    return LinearAccelerationSensor;
}
Location = function () {
    util_log(">>> FIXME: Location used");
    return Location;
}
Lock = function () {
    util_log(">>> FIXME: Lock used");
    return Lock;
}
LockManager = function () {
    util_log(">>> FIXME: LockManager used");
    return LockManager;
}
Magnetometer = function () {
    util_log(">>> FIXME: Magnetometer used");
    return Magnetometer;
}
MathMLElement = function () {
    util_log(">>> FIXME: MathMLElement used");
    return MathMLElement;
}
MediaCapabilities = function () {
    util_log(">>> FIXME: MediaCapabilities used");
    return MediaCapabilities;
}
MediaDeviceInfo = function () {
    util_log(">>> FIXME: MediaDeviceInfo used");
    return MediaDeviceInfo;
}
MediaDevices = function () {
    util_log(">>> FIXME: MediaDevices used");
    return MediaDevices;
}
MediaElementAudioSourceNode = function () {
    util_log(">>> FIXME: MediaElementAudioSourceNode used");
    return MediaElementAudioSourceNode;
}
MediaError = function () {
    util_log(">>> FIXME: MediaError used");
    return MediaError;
}
MediaImage = function () {
    util_log(">>> FIXME: MediaImage used");
    return MediaImage;
}
MediaKeyMessageEvent = function () {
    util_log(">>> FIXME: MediaKeyMessageEvent used");
    return MediaKeyMessageEvent;
}
MediaKeys = function () {
    util_log(">>> FIXME: MediaKeys used");
    return MediaKeys;
}
MediaKeySession = function () {
    util_log(">>> FIXME: MediaKeySession used");
    return MediaKeySession;
}
MediaKeyStatusMap = function () {
    util_log(">>> FIXME: MediaKeyStatusMap used");
    return MediaKeyStatusMap;
}
MediaKeySystemAccess = function () {
    util_log(">>> FIXME: MediaKeySystemAccess used");
    return MediaKeySystemAccess;
}
MediaList = function () {
    util_log(">>> FIXME: MediaList used");
    return MediaList;
}
MediaMetadata = function () {
    util_log(">>> FIXME: MediaMetadata used");
    return MediaMetadata;
}
MediaQueryList = function () {
    util_log(">>> FIXME: MediaQueryList used");
    return MediaQueryList;
}
MediaQueryListEvent = function () {
    util_log(">>> FIXME: MediaQueryListEvent used");
    return MediaQueryListEvent;
}
MediaRecorder = function () {
    util_log(">>> FIXME: MediaRecorder used");
    return MediaRecorder;
}
MediaRecorderErrorEvent = function () {
    util_log(">>> FIXME: MediaRecorderErrorEvent used");
    return MediaRecorderErrorEvent;
}
MediaSession = function () {
    util_log(">>> FIXME: MediaSession used");
    return MediaSession;
}
MediaSource = function () {
    util_log(">>> FIXME: MediaSource used");
    return MediaSource;
}
MediaSourceHandle = function () {
    util_log(">>> FIXME: MediaSourceHandle used");
    return MediaSourceHandle;
}
MediaStream = function () {
    util_log(">>> FIXME: MediaStream used");
    return MediaStream;
}
MediaStreamAudioDestinationNode = function () {
    util_log(">>> FIXME: MediaStreamAudioDestinationNode used");
    return MediaStreamAudioDestinationNode;
}
MediaStreamAudioSourceNode = function () {
    util_log(">>> FIXME: MediaStreamAudioSourceNode used");
    return MediaStreamAudioSourceNode;
}
MediaStreamEvent = function () {
    util_log(">>> FIXME: MediaStreamEvent used");
    return MediaStreamEvent;
}
MediaStreamTrack = function () {
    util_log(">>> FIXME: MediaStreamTrack used");
    return MediaStreamTrack;
}
MediaStreamTrackAudioSourceNode = function () {
    util_log(">>> FIXME: MediaStreamTrackAudioSourceNode used");
    return MediaStreamTrackAudioSourceNode;
}
MediaStreamTrackEvent = function () {
    util_log(">>> FIXME: MediaStreamTrackEvent used");
    return MediaStreamTrackEvent;
}
MediaStreamTrackGenerator = function () {
    util_log(">>> FIXME: MediaStreamTrackGenerator used");
    return MediaStreamTrackGenerator;
}
MediaStreamTrackProcessor = function () {
    util_log(">>> FIXME: MediaStreamTrackProcessor used");
    return MediaStreamTrackProcessor;
}
MediaTrackConstraints = function () {
    util_log(">>> FIXME: MediaTrackConstraints used");
    return MediaTrackConstraints;
}
MediaTrackSettings = function () {
    util_log(">>> FIXME: MediaTrackSettings used");
    return MediaTrackSettings;
}
MediaTrackSupportedConstraints = function () {
    util_log(">>> FIXME: MediaTrackSupportedConstraints used");
    return MediaTrackSupportedConstraints;
}
MerchantValidationEvent = function () {
    util_log(">>> FIXME: MerchantValidationEvent used");
    return MerchantValidationEvent;
}
MessageChannel = function () {
    util_log(">>> FIXME: MessageChannel used");
    return MessageChannel;
}
MessageEvent = function () {
    util_log(">>> FIXME: MessageEvent used");
    return MessageEvent;
}
MessagePort = function () {
    util_log(">>> FIXME: MessagePort used");
    return MessagePort;
}
Metadata = function () {
    util_log(">>> FIXME: Metadata used");
    return Metadata;
}
MIDIAccess = function () {
    util_log(">>> FIXME: MIDIAccess used");
    return MIDIAccess;
}
MIDIConnectionEvent = function () {
    util_log(">>> FIXME: MIDIConnectionEvent used");
    return MIDIConnectionEvent;
}
MIDIInput = function () {
    util_log(">>> FIXME: MIDIInput used");
    return MIDIInput;
}
MIDIInputMap = function () {
    util_log(">>> FIXME: MIDIInputMap used");
    return MIDIInputMap;
}
MIDIMessageEvent = function () {
    util_log(">>> FIXME: MIDIMessageEvent used");
    return MIDIMessageEvent;
}
MIDIOutput = function () {
    util_log(">>> FIXME: MIDIOutput used");
    return MIDIOutput;
}
MIDIOutputMap = function () {
    util_log(">>> FIXME: MIDIOutputMap used");
    return MIDIOutputMap;
}
MIDIPort = function () {
    util_log(">>> FIXME: MIDIPort used");
    return MIDIPort;
}
MimeType = function () {
    util_log(">>> FIXME: MimeType used");
    return MimeType;
}
MimeTypeArray = function () {
    util_log(">>> FIXME: MimeTypeArray used");
    return MimeTypeArray;
}
MouseEvent = function () {
    util_log(">>> FIXME: MouseEvent used");
    return MouseEvent;
}
MouseScrollEvent = function () {
    util_log(">>> FIXME: MouseScrollEvent used");
    return MouseScrollEvent;
}
MSGestureEvent = function () {
    util_log(">>> FIXME: MSGestureEvent used");
    return MSGestureEvent;
}
MSGraphicsTrust = function () {
    util_log(">>> FIXME: MSGraphicsTrust used");
    return MSGraphicsTrust;
}
MSManipulationEvent = function () {
    util_log(">>> FIXME: MSManipulationEvent used");
    return MSManipulationEvent;
}
MSSiteModeEvent = function () {
    util_log(">>> FIXME: MSSiteModeEvent used");
    return MSSiteModeEvent;
}
msWriteProfilerMark = function () {
    util_log(">>> FIXME: msWriteProfilerMark used");
    return msWriteProfilerMark;
}
MutationEvent = function () {
    util_log(">>> FIXME: MutationEvent used");
    return MutationEvent;
}
MutationObserver = function () {
    util_log(">>> FIXME: MutationObserver used");
    return MutationObserver;
}
MutationRecord = function () {
    util_log(">>> FIXME: MutationRecord used");
    return MutationRecord;
}
NamedNodeMap = function () {
    util_log(">>> FIXME: NamedNodeMap used");
    return NamedNodeMap;
}
NavigateEvent = function () {
    util_log(">>> FIXME: NavigateEvent used");
    return NavigateEvent;
}
Navigation = function () {
    util_log(">>> FIXME: Navigation used");
    return Navigation;
}
NavigationCurrentEntryChangeEvent = function () {
    util_log(">>> FIXME: NavigationCurrentEntryChangeEvent used");
    return NavigationCurrentEntryChangeEvent;
}
NavigationDestination = function () {
    util_log(">>> FIXME: NavigationDestination used");
    return NavigationDestination;
}
NavigationHistoryEntry = function () {
    util_log(">>> FIXME: NavigationHistoryEntry used");
    return NavigationHistoryEntry;
}
NavigationPreloadManager = function () {
    util_log(">>> FIXME: NavigationPreloadManager used");
    return NavigationPreloadManager;
}
NavigationTransition = function () {
    util_log(">>> FIXME: NavigationTransition used");
    return NavigationTransition;
}
Navigator = function () {
    util_log(">>> FIXME: Navigator used");
    return Navigator;
}
NavigatorUAData = function () {
    util_log(">>> FIXME: NavigatorUAData used");
    return NavigatorUAData;
}
NDEFMessage = function () {
    util_log(">>> FIXME: NDEFMessage used");
    return NDEFMessage;
}
NDEFReader = function () {
    util_log(">>> FIXME: NDEFReader used");
    return NDEFReader;
}
NDEFReadingEvent = function () {
    util_log(">>> FIXME: NDEFReadingEvent used");
    return NDEFReadingEvent;
}
NDEFRecord = function () {
    util_log(">>> FIXME: NDEFRecord used");
    return NDEFRecord;
}
NetworkInformation = function () {
    util_log(">>> FIXME: NetworkInformation used");
    return NetworkInformation;
}

// This is defined in element.js
// Node = function () { }

NodeIterator = function () {
    util_log(">>> FIXME: NodeIterator used");
    return NodeIterator;
}
NodeList = function () {
    util_log(">>> FIXME: NodeList used");
    return NodeList;
}
Notification = function () {
    util_log(">>> FIXME: Notification used");
    return Notification;
}
NotificationEvent = function () {
    util_log(">>> FIXME: NotificationEvent used");
    return NotificationEvent;
}
NotifyAudioAvailableEvent = function () {
    util_log(">>> FIXME: NotifyAudioAvailableEvent used");
    return NotifyAudioAvailableEvent;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement
HTMLElement = _proxy(function (n) {
    // Inherit Element
    Element.call(this, n);

    // Key properties for MalwareJail
    this._id = _object_id;
    this._name = "HTMLElement[" + this._id + "]<" + n + ">";

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement#instance_methods

    this.attachInternals = function () {
        util_log(this._name + ".attachInternals(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.blur = function () {
        util_log(this._name + ".blur(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click
    this.click = function (fn) {
        util_log(this._name + ".click(" + fn + ")");
        if (fn) {
            e = _proxy(new Event("click"));
            document._events.push(e);
            fn(e);
        }
        else if (this.href || this._attributes["href"]) {
            // If there was no function passed to the click method and an href exists,
            // then we should click the href
            if (this.href) {
                href = this.href;
            } else {
                href = this._attributes["href"];
            }

            if (this._attributes["download"]) {
                file_name = this._attributes["download"];
            } else {
                file_name = this._name;
            }

            match = href.match(encoded_base64_regex);
            if (match) {
                util_log("Base64 match, decoding to " + file_name + " ...");
                _wscript_saved_files[file_name] = Buffer.from(match[1], 'base64');
            } else {
                util_log(">>> FIXME: Possible href '" + href + "' to be clicked that wasn't base64-encoded");
            }
        }
        else util_log(">>> FIXME: Missed opportunity in .click()");
    }

    this.focus = function () {
        util_log(this._name + ".focus(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement#instance_properties
    _defineSingleProperty(this, "accessKey");
    _defineSingleProperty(this, "accessKeyLabel");
    _defineSingleProperty(this, "contentEditable");
    _defineSingleProperty(this, "contextMenu");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset
    _defineSingleProperty(this, "dataset");

    _defineSingleProperty(this, "dir");
    _defineSingleProperty(this, "enterKeyHint");
    _defineSingleProperty(this, "hidden");
    _defineSingleProperty(this, "inert");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText
    _defineSingleProperty(this, "innertext", "_text");

    _defineSingleProperty(this, "inputMode");
    _defineSingleProperty(this, "isContentEditable");
    _defineSingleProperty(this, "lang");
    _defineSingleProperty(this, "nonce");
    _defineSingleProperty(this, "offsetHeight");
    _defineSingleProperty(this, "offsetLeft");
    _defineSingleProperty(this, "offsetParent");
    _defineSingleProperty(this, "offsetTop");
    _defineSingleProperty(this, "offsetWidth");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText
    _defineSingleProperty(this, "outerText", "_text");
});
HTMLElement.prototype = Object.create(Element.prototype);
HTMLElement.prototype.constructor = HTMLElement;
HTMLElement.toString = HTMLElement.toJSON = () => {
    return "HTMLElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
HTMLAnchorElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "a");

    // Key properties for MalwareJail
    this.id = _object_id
    this._name = "HTMLAnchorElement[" + this._id + "]";

    this.elementName = "a";
    this._attributes = {};
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
    this._download = undefined;
    Object.defineProperty(this, "download", {
        get: function () {
            util_log(this._name + ".download() => " + this._attributes["download"]);
            return this._attributes["download"]
        },
        set: function (value, filename) {
            util_log(this._name + ".download = " + value + " with filename = " + filename);
            this._attributes["download"] = value
        }
    });

    _defineSingleProperty(this, "href");
    _defineSingleProperty(this, "hreflang");
    _defineSingleProperty(this, "ping");
    _defineSingleProperty(this, "referrerpolicy");
    _defineSingleProperty(this, "rel");
    _defineSingleProperty(this, "target");
    _defineSingleProperty(this, "type");

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#deprecated_attributes

    _defineSingleProperty(this, "charset");
    _defineSingleProperty(this, "coords");

    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "name");

    _defineSingleProperty(this, "rev");
    _defineSingleProperty(this, "shape");
});
HTMLAnchorElement.prototype = Object.create(HTMLElement.prototype);
HTMLAnchorElement.prototype.constructor = HTMLAnchorElement;
HTMLAnchorElement.toString = HTMLAnchorElement.toJSON = () => {
    return "Anchor"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement
HTMLButtonElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "button");

    // Key properties for MalwareJail
    this.id = _object_id
    this._name = "HTMLButtonElement[" + this._id + "]";

    this.elementName = "button";
    this._attributes = {};
    util_log("new " + this._name + "()");
    this.on = function (action, fn) {
        if (fn.constructor.name === "Function") {
            var function_name = fn.prototype.name;
            if (function_name === undefined) {
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                function_name = "anonymous";
            }
            util_log(this._name + "." + action + "(" + function_name + ")")
            util_log("Running function " + function_name + "()");
            fn();
        }
        else {
            util_log("That's weird, a non-function was passed to button.on...")
        }
    }
});
HTMLButtonElement.prototype = Object.create(HTMLElement.prototype);
HTMLButtonElement.prototype.constructor = HTMLButtonElement;
HTMLButtonElement.toString = HTMLButtonElement.toJSON = () => {
    return "Button"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement
HTMLFormElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "form");

    // Key properties for MalwareJail
    this.id = _object_id
    this._name = "HTMLFormElement[" + this._id + "]";

    this.elementName = "form";
    this._attributes = {};
    util_log("new " + this._name + "()");
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset
    this.reset = function () {
        util_log(this._name + ".reset()");
    }
});
HTMLFormElement.prototype = Object.create(HTMLElement.prototype);
HTMLFormElement.prototype.constructor = HTMLFormElement;
HTMLFormElement.toString = HTMLFormElement.toJSON = () => {
    return "Form"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement
HTMLInputElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "input");

    // Key properties for MalwareJail
    this.id = _object_id
    this._name = "HTMLInputElement[" + this._id + "]";

    this.elementName = "input";
    this._attributes = {};
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
    this.focus = function () {
        util_log(this._name + ".focus(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.ForceLettersOnly = function () {
        util_log(this._name + ".ForceLettersOnly()");
    }
    this.ForceNumericOnly = function () {
        util_log(this._name + ".ForceNumericOnly()");
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event
    this.keypress = function (listener) {
        return this.addEventListener("keypress", listener);
    }
    this.attr = function (key, value) {
        util_log(this._name + ".attr(" + key + ", " + value + ")");
        this._attributes[key] = value;
    }
    Object.defineProperty(this, "value", {
        get: function () {
            if (["class", "id"].some((key) => key in this._attributes && this._attributes[key].toLowerCase().includes("email"))) {
                return "blah.blah@blah.com";
            } else if (this._attributes["value"]) {
                return this._attributes["value"];
            // Assume the default is a password
            } else {
                return "JsJ@w$==C00l!";
            }
        },
        set: function (value) {
            this._attributes["value"] = value;
        }
    });
});
HTMLInputElement.prototype = Object.create(HTMLElement.prototype);
HTMLInputElement.prototype.constructor = HTMLInputElement;
HTMLInputElement.toString = HTMLInputElement.toJSON = () => {
    return "Input"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement
HTMLScriptElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "script");

    // Key properties for MalwareJail
    this.id = _object_id
    this._name = "HTMLScriptElement[" + this._id + "]";

    this.elementName = "script";
    this._attributes = {};
    util_log("new " + this._name + "()");
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
    Object.defineProperty(this, "onload", {
        set: function (fn) {
            if (fn.constructor.name === "Function") {
                var function_name = fn.prototype.name;
                if (function_name === undefined) {
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                    function_name = "anonymous";
                }
                util_log(this._name + ".onload(" + function_name + ")")
                var e = null;
                if (document._events.length == 1) {
                    e = document._events[0]
                } else {
                    e = _proxy(new Event("load"));
                    document._events.push(e);
                }
                util_log("Running function " + function_name + "(" + e + ")");
                fn(e);
            }
            else {
                util_log("That's weird, a non-function was passed to window.onload...")
            }
        }
    });
});
HTMLScriptElement.prototype = Object.create(HTMLElement.prototype);
HTMLScriptElement.prototype.constructor = HTMLScriptElement;
HTMLScriptElement.toString = HTMLScriptElement.toJSON = () => {
    return "Script"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement
HTMLStyleElement = _proxy(function (css_text = "") {
    // Inherit HTMLELement
    // HTMLElement.call(this, "style");

    // Key properties for MalwareJail
    this.id = _object_id
    this._name = "HTMLStyleElement[" + this._id + "]";

    this.elementName = "style";
    this._attributes = {
        "visibility": true,
        "left": 0,
        "top": 0,
        "position": "",
        "styleSheet": {
            cssText: css_text
        },
        "width": 1920,
        "height": 1080,
        "display": "none",
    };
    // https://developer.mozilla.org/en-US/docs/Web/CSS/background-image
    this.backgroundImage = null;
    // We cannot point the global style to an Element since an Element has a Style attribute and
    // thus creates an endless loop
    this.tagname = "style";
    this.parentNode = this;
    this.removeChild = function (e) {
        util_log(this._name + ".removeChild(" + e._name + ")");
        return e;
    }
    this.toString = this.tostring = () => {
        return this._name;
    }

    for (var k in this._attributes) {
        _defineProperty(this, k, this._attributes);
    }

});
HTMLStyleElement.prototype = Object.create(HTMLElement.prototype);
HTMLStyleElement.prototype.constructor = HTMLStyleElement;
HTMLStyleElement.toString = HTMLStyleElement.toJSON = () => {
    return "Style"
}

// https://developer.mozilla.org/en-US/docs/Web/API/URL/URL
// Since we are overriding the URL alias from node:url via URLAlias to allow us to write the
//  URL contents to disk as soon as we see it, we only need to re-implement the
// constructor
URL = function () {
    util_log("new URL(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    const url = arguments[0];
    return new URLAlias(url);
}

// https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
URL.createObjectURL = function () {
    util_log("URL.createObjectURL(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    const object = arguments[0]
    return URLAlias.createObjectURL(object);
}

// https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
URL.revokeObjectURL = function () {
    util_log("URL.revokeObjectURL(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    const objectURL = arguments[0]
    return URLAlias.revokeObjectURL(objectURL);
}

// https://nodejs.org/api/worker_threads.html#class-worker
// Since we are overriding the Worker alias from node:worker_threads via WorkerAlias to allow us to write the
//  Worker contents to disk as soon as we see it, we only need to re-implement the
// constructor
Worker = function () {
    const _id = _object_id++;
    var file_path = arguments[0]
    if (file_path.slice(0, 5) === "blob:") {
        // Worker expects a file path, not a Blob ID
        // Therefore write the blob content to disk
        file_name = "Blob[" + _id + "]";
        file_path = _save_files + file_name;
        const blob = resolveObjectURL(arguments[0])
        blob.arrayBuffer().then(function (result) {
            content = Buffer.from(result)
            fs.writeFile(filename=file_path, data=content, function (err) {
                if (err) return util_log(err)
            });
        });
        util_log("new Worker(" + file_name + ")")
    } else {
        util_log("new Worker(" + file_path + ")")
    }
    return new WorkerAlias(file_path)
}

// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
// Pretty much a copy of MSXML2_XMLHTTP
XMLHttpRequest = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "XMLHttpRequest[" + this.id + "]";
    util_log("new " + this._name);

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#instance_methods

    this.abort = function (message) {
        util_log(this._name + ".abort(" + message + ")");
    }
    this.getAllResponseHeaders = function (message) {
        util_log(this._name + ".getAllResponseHeaders(" + message + ")");
    }
    this.getResponseHeader = function (message) {
        util_log(this._name + ".getResponseHeader(" + message + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open
    this.open = function (method, url, async, user, password) {
        url = url.replace(/\r|\n/g, "");
        util_log(this._name + _truncateOutput((".open(" + method + "," + url + "," + async + ")")));
        match = url.match(encoded_base64_regex);
        if (match) {
            util_log("Base64 match, decoding...");
            _wscript_saved_files[this._name] = Buffer.from(match[1], 'base64');
        }
        this.method = method;
        this.url = url;
        switch (("" + async).toLowerCase()) {
            case "false":
            case "no":
            case "0":
            case "":
            case "undefined":
            case null:
                this.async = false;
                break;
            default:
                this.async = true;
        }
        // TODO: exit if URL seen x times
        this._wscript_urls_index = _wscript_urls.length
        _wscript_urls[this._wscript_urls_index] = { "url": url, "method": method };
    }

    this.overrideMimeType = function (message) {
        util_log(this._name + ".overrideMimeType(" + message + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send
    this.send = function (body) {
        if (body == undefined) {
            util_log(this._name + ".send()");
        } else {
            util_log(this._name + ".send(" + JSON.stringify(body) + ")");
        }
        if (_download === "Yes") {
            try {
                var res = _sync_request(this.method, this.url, {
                    'headers': this._headers
                });
                //util_log("Sync_req: " + _truncateOutput(res.getBody()));
                this.status = res.statusCode || 0;
                this.readystate = 4;
                this.statustext = "OK";
                this.responsebody = res.body || "";
                this.allresponseheaders = JSON.stringify(res.headers) || "";
            } catch (err) {
                util_log(this._name + ".send() Exception: " + _truncateOutput(_inspect(err)));
                this.status = err.statusCode || 0;
                this.readystate = 4;
                this.statustext = err.toString();
                this.responsebody = err.body || "";
                this.allresponseheaders = JSON.stringify(err.headers) || "";
            }
            if (this._wscript_urls_index != null) {
                _wscript_urls[this._wscript_urls_index]["status"] = this.status;
                _wscript_urls[this._wscript_urls_index]["response_headers"] = this.allresponseheaders;
                _wscript_urls[this._wscript_urls_index]["response_body"] = _truncateOutput(this.responsebody);
                _wscript_urls[this._wscript_urls_index]["request_body"] = a;
                _wscript_urls[this._wscript_urls_index]["statustext"] = this.statustext;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readystatechange_event
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
            return;
        } else if (_download === "No") {
            util_log(this._name + " Not sending data, if you want to interact with remote server, set --down");
            var s = 'MZ'
            for (var ii = 0; ii < 200; ii++) {
                s += 'Dummy content, use --down to download the real payload.\n';
            }
            this.responsebody = s;
            this.status = 200;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange() with dummy data");
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
        } else if (_download === "Return HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
        } else if (_download === "Throw HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404 & throwing exception");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
            throw new Error("XMLHttpRequest.send intentionally throwing exception");
        } else {
            util_log(">>> FIXME: XMLHttpRequest.send _download '" + _download + "' not handled");
            throw new TypeError(">>> FIXME: XMLHttpRequest.send _download '" + _download + "' not handled");
        }
        util_log(this._name + ".send(" + JSON.stringify(body) + ") finished");
    }

    this.setRequestHeader = function (message) {
        util_log(this._name + ".setRequestHeader(" + message + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#instance_properties

    _defineSingleProperty(this, "readyState");
    _defineSingleProperty(this, "response");
    _defineSingleProperty(this, "responseText");
    _defineSingleProperty(this, "responseType");
    _defineSingleProperty(this, "responseURL");
    _defineSingleProperty(this, "responseXML");
    _defineSingleProperty(this, "status");
    _defineSingleProperty(this, "statusText");
    _defineSingleProperty(this, "timeout");
    _defineSingleProperty(this, "upload");
    _defineSingleProperty(this, "withCredentials");

    // Non-standard properties
    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#non-standard_properties

    _defineSingleProperty(this, "channel");
    _defineSingleProperty(this, "mozAnon");
    _defineSingleProperty(this, "mozSystem");
    _defineSingleProperty(this, "mozBackgroundRequest");

    // Not sure how this is used...
    let self = this;

    // Helper method
    this.toString = this.tostring = () => {
        return this._name
    }
});
XMLHttpRequest.toString = XMLHttpRequest.toJSON = () => {
    return "XMLHttpRequest"
}
